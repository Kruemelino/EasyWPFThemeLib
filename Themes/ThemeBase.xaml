<ResourceDictionary x:Class="ThemeBase" 
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">
    
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Converter/Converter.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    
    <CornerRadius x:Key="DefaultCornerRadius">0</CornerRadius>
    <CornerRadius x:Key="DefaultCornerRadiusLeft">0</CornerRadius>
    <CornerRadius x:Key="DefaultCornerRadiusRight">0</CornerRadius>
    <!--<CornerRadius x:Key="DefaultCornerRadiusLeft">1.5,0,0,1.5</CornerRadius>
    <CornerRadius x:Key="DefaultCornerRadiusRight">0,1.5,1.5,0</CornerRadius>-->   
   
    <!--#region Colors & Brushes-->

    <!--https://docs.telerik.com/devtools/wpf/styling-and-appearance/themes-suite/visualstudio2013-->

    <!--#region Brushes, which are same in the palettes-->
    <!--AccentMainBrush is blue by default and it is the main accent brush for the theme-->
    <Color x:Key="AccentColor"                  >#FF3399FF</Color>

    <!--AccentDarkBrush is blue by default and it is the darker accent brush for the theme-->
    <Color x:Key="AccentDarkColor"              >#FF007ACC</Color>
    
    <!--SelectedBrush is white by default and is the main color for text or paths which are over elements with accent background-->
    <Color x:Key="SelectedColor"                >#FFFFFFFF</Color>

    <!--ValidatonBrush is red by default and it is the brush used for validation where such is applicable in our controls-->
    <Color x:Key="ValidationColor"              >#FFFF3333</Color>

    <Color x:Key="CloseButtonSelectionColor"    >#FF94444A</Color>
    <Color x:Key="CloseButtonMouseOverColor"    >#FFFF3333</Color>
    
    <!--AccentMainBrush is blue by default and it is the main accent brush for the theme-->
    <SolidColorBrush x:Key="AccentBrush"               Color="{StaticResource AccentColor}" />

    <!--AccentDarkBrush is blue by default and it is the darker accent brush for the theme-->
    <SolidColorBrush x:Key="AccentDarkBrush"           Color="{StaticResource AccentDarkColor}" />

    <!--SelectedBrush is white by default and is the main color for text or paths which are over elements with accent background-->
    <SolidColorBrush x:Key="ControlSelectedForeground" Color="{StaticResource SelectedColor}" />

    <!--ValidatonBrush is red by default and it is the brush used for validation where such is applicable in our controls-->
    <SolidColorBrush x:Key="ValidationBrush"           Color="{StaticResource ValidationColor}" />

    <SolidColorBrush x:Key="CloseButtonSelectionBrush" Color="{StaticResource CloseButtonSelectionColor}" />
    <SolidColorBrush x:Key="CloseButtonMouseOverBrush" Color="{StaticResource CloseButtonMouseOverColor}" />
    <!--#endregion-->

    <!--#endregion-->

    <!--#region Styles by AngryCarrot789 WPFDarkTheme-->
    <!--https://github.com/AngryCarrot789/WPFDarkTheme-->

    <!--#region Setup Stuff-->
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle StrokeDashArray="1 2" 
                               StrokeThickness="1" 
                               Stroke="{DynamicResource ControlPrimaryBrightDefaultBorderBrush}"
                               SnapsToDevicePixels="True" 
                               Margin="2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle StrokeDashArray="1 2" 
                               StrokeThickness="1" 
                               Stroke="{DynamicResource ControlPrimaryBrightDefaultBorderBrush}"
                               SnapsToDevicePixels="True" 
                               Margin="14,0,0,0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    
    <!--#region Button-->
    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" 
                               Height="{TemplateBinding Height}" 
                               Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True"
                            HorizontalAlignment="Stretch" 
                            VerticalAlignment="Stretch"
                            CornerRadius="{StaticResource DefaultCornerRadius}" >
                        <ContentPresenter x:Name="contentPresenter" 
                                          Focusable="False" 
                                          Margin="{TemplateBinding Padding}" 
                                          RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefault" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlSelectedBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ControlPrimarySelectedBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource ControlDisabledForeground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--#endregion-->

    <!--#region ToggleButton-->
    <Style TargetType="{x:Type ToggleButton}" >
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True"
                            HorizontalAlignment="Stretch" 
                            VerticalAlignment="Stretch"
                            CornerRadius="{StaticResource DefaultCornerRadius}" >
                        <ContentPresenter x:Name="contentPresenter" 
                                          Focusable="False" 
                                          Margin="{TemplateBinding Padding}" 
                                          RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ControlPrimarySelectedBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource ControlSelectedForeground}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource ControlPrimarySelectedMouseOverBackground}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlPrimarySelectedMouseOverBorderBrush}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ControlPrimarySelectedBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource ControlDisabledForeground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region Calendar-->

    <!--https://docs.microsoft.com/de-de/dotnet/desktop/wpf/controls/calendar-styles-and-templates?view=netframeworkdesktop-4.8-->
    <!--Style for the days of a month.-->
    <Style TargetType="CalendarDayButton" x:Key="CalendarDayButtonStyle">
        <Setter Property="MinWidth" Value="5"/>
        <Setter Property="MinHeight" Value="5"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CalendarDayButton">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal"/>
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" 
                                                         Storyboard.TargetProperty="Opacity" To="0.5" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" 
                                                         Storyboard.TargetProperty="Opacity" To="0.5" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" 
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0"/>
                                        <DoubleAnimation Storyboard.TargetName="NormalText" 
                                                         Storyboard.TargetProperty="Opacity" To=".35" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Unselected"/>
                                <VisualState Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" 
                                                         Storyboard.TargetProperty="Opacity" To=".75" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="CalendarButtonFocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="CalendarButtonFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DayButtonFocusVisual" 
                                                                       Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="CalendarButtonUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DayButtonFocusVisual" 
                                                                       Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Active"/>
                                <VisualState Name="Inactive">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="NormalText" 
                                                        Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="{DynamicResource DisabledForegroundColor}"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="DayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="RegularDay"/>
                                <VisualState Name="Today">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="TodayBackground" 
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="NormalText" 
                                                        Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="{DynamicResource SelectedColor}"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="BlackoutDayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="NormalDay"/>
                                <VisualState Name="BlackoutDay">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" 
                                                         Storyboard.TargetName="Blackout" 
                                                         Storyboard.TargetProperty="Opacity" To=".4"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Rectangle x:Name="TodayBackground" 
                                   Opacity="0" 
                                   StrokeThickness="0.5"
                                   Fill="{DynamicResource ControlPrimarySelectedBackground}"
                                   Stroke="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                        
                        <Rectangle x:Name="SelectedBackground"
                                   Opacity="0" 
                                   StrokeThickness="0.5"
                                   Fill="{DynamicResource ControlPrimarySelectedBackground}"
                                   Stroke="{DynamicResource ControlPrimarySelectedBorderBrush}" />
                        
                        <!--<Border Background="{TemplateBinding Background}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                BorderBrush="{TemplateBinding BorderBrush}"/>-->
                        
                        <Rectangle x:Name="Background" 
                                   Opacity="0" 
                                   StrokeThickness="0.5"
                                   Fill="{DynamicResource ControlPrimaryMouseOverBackground}"
                                   Stroke="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>

                        <ContentPresenter x:Name="NormalText" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                          Margin="5,1,5,1" 
                                          TextElement.Foreground="{TemplateBinding Foreground}"/>

                        <Path x:Name="Blackout" Opacity="0" 
                              Margin="3" 
                              HorizontalAlignment="Stretch"
                              VerticalAlignment="Stretch" 
                              RenderTransformOrigin="0.5,0.5" 
                              Fill="{DynamicResource ValidationBrush}" 
                              Stretch="Fill" 
                              Data="M8.1772461,11.029181 L10.433105,
                                    11.029181 L11.700684,12.801641 L12.973633,
                                    11.029181 L15.191895,11.029181 L12.844727,
                                    13.999395 L15.21875,17.060919 L12.962891,
                                    17.060919 L11.673828,15.256231 L10.352539,
                                    17.060919 L8.1396484,17.060919 L10.519043,
                                    14.042364 z"/>
                        
                        <Rectangle x:Name="DayButtonFocusVisual" 
                                   Visibility="Collapsed" 
                                   IsHitTestVisible="false" 
                                   Stroke="{DynamicResource ControlPrimarySelectedMouseOverBorderBrush}"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--Style for the months of a year and years of a decade.-->
    <Style TargetType="CalendarButton" x:Key="CalendarButtonStyle">
        <Setter Property="MinWidth" Value="40"/>
        <Setter Property="MinHeight" Value="42"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CalendarButton">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal"/>
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" 
                                                         Storyboard.TargetProperty="Opacity" To=".5" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" 
                                                         Storyboard.TargetProperty="Opacity" To=".5" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Unselected"/>
                                <VisualState Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" 
                                                         Storyboard.TargetProperty="Opacity" To=".75" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Active"/>
                                <VisualState Name="Inactive">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" 
                                                        Storyboard.TargetName="NormalText" 
                                                        Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" 
                                                        To="{DynamicResource DisabledForegroundColor}"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="CalendarButtonFocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="CalendarButtonFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" 
                                                                       Storyboard.TargetName="CalendarButtonFocusVisual" 
                                                                       Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="CalendarButtonUnfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="SelectedBackground"
                                   Opacity="0" 
                                   StrokeThickness="0.5"
                                   Fill="{DynamicResource ControlPrimarySelectedBackground}"
                                   Stroke="{DynamicResource ControlPrimarySelectedBorderBrush}" />

                        <Rectangle x:Name="Background" 
                                   Opacity="0" 
                                   StrokeThickness="0.5"
                                   Fill="{DynamicResource ControlPrimaryMouseOverBackground}"
                                   Stroke="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>

                        <ContentPresenter x:Name="NormalText" 
                                          Margin="1,0,1,1"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" >

                        </ContentPresenter>
                        
                        <Rectangle x:Name="CalendarButtonFocusVisual" 
                                   Visibility="Collapsed" 
                                   IsHitTestVisible="false" 
                                   Stroke="{DynamicResource ControlPrimarySelectedMouseOverBorderBrush}"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="Background" Value="{DynamicResource BackgroundColor}" />-->
    </Style>
    
    <!--Button to go to the previous month or year.-->
    <ControlTemplate x:Key="PreviousButtonTemplate" TargetType="{x:Type Button}">
        <Grid Cursor="Hand">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal"/>
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" Storyboard.TargetName="path" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" 
                                            To="{DynamicResource MarkerColor}"/>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="path"/>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!--<Rectangle Fill="Transparent" Opacity="1" Stretch="Fill"/>-->
            <Grid Background="Transparent">
                <Path x:Name="path" Margin="14,-6,0,0" Stretch="Fill" HorizontalAlignment="Left" Height="10" VerticalAlignment="Center" Width="6" 
                      Data="M288.75,232.25 L288.75,240.625 L283,236.625 z"
                      Fill="{DynamicResource ControlPrimaryMouseOverGlythColor}"/>

            </Grid>
        </Grid>
    </ControlTemplate>
    
    <!--Button to go to the next month or year.-->
    <ControlTemplate x:Key="NextButtonTemplate" TargetType="{x:Type Button}">
        <Grid Cursor="Hand">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal"/>
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" To="{DynamicResource MarkerColor}" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="path"/>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="path"/>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!--<Rectangle Fill="#11E5EBF1" Opacity="1" Stretch="Fill"/>-->
            <Grid Background="Transparent">
                <Path x:Name="path" Data="M282.875,231.875 L282.875,240.375 L288.625,236 z" HorizontalAlignment="Right" Height="10" Margin="0,-6,14,0" Stretch="Fill" VerticalAlignment="Center" Width="6"
                      Fill="{DynamicResource ControlPrimaryMouseOverGlythColor}"/>


            </Grid>
        </Grid>
    </ControlTemplate>
   
    <!--Button to go up a level to the year or decade.-->
    <ControlTemplate x:Key="HeaderButtonTemplate" TargetType="{x:Type Button}">
        <Grid Cursor="Hand">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal"/>
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Duration="0" To="{DynamicResource AccentColor}" 
                                            Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" 
                                            Storyboard.TargetName="buttonContent"/>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="buttonContent"/>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ContentPresenter x:Name="buttonContent" 
                              Margin="1,4,1,9" 
                              ContentTemplate="{TemplateBinding ContentTemplate}" 
                              Content="{TemplateBinding Content}" 
                              TextElement.Foreground="{TemplateBinding Foreground}" 
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
    </ControlTemplate>
    
    <Style x:Key="CalendarItemStyle" TargetType="{x:Type CalendarItem}">
        <Setter Property="Margin" Value="0,3,0,3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarItem}">
                    <ControlTemplate.Resources>
                        <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
                            <TextBlock x:Name="abc"                                       
                                       FontWeight="Bold" 
                                       FontSize="9.5"
                                       Margin="0,6,0,6" 
                                       Text="{Binding}"
                                       HorizontalAlignment="Center" 
                                       VerticalAlignment="Center"/>

                        </DataTemplate>
                    </ControlTemplate.Resources>
                    
                    <Grid x:Name="PART_Root">
                        
                        <Border BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" >
                            <Border BorderBrush="{DynamicResource ControlDefaultBorderBrush}" 
                                    BorderThickness="0.5" >
                                <Grid>
                                    <Grid.Resources/>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    
                                    <Button x:Name="PART_PreviousButton" 
                                            Template="{StaticResource PreviousButtonTemplate}" 
                                            Focusable="False" HorizontalAlignment="Left" 
                                            Grid.Column="0" Grid.Row="0" 
                                            Height="20" Width="28"/>
                                    
                                    <Button x:Name="PART_HeaderButton" 
                                            FontWeight="Bold" Focusable="False" 
                                            FontSize="10.5" 
                                            HorizontalAlignment="Center" 
                                            VerticalAlignment="Center" 
                                            Grid.Column="1" Grid.Row="0" 
                                            Template="{StaticResource HeaderButtonTemplate}"/>
                                    
                                    <Button x:Name="PART_NextButton" 
                                            Focusable="False" 
                                            HorizontalAlignment="Right" 
                                            Grid.Column="2" 
                                            Grid.Row="0" 
                                            Template="{StaticResource NextButtonTemplate}"
                                            Height="20" 
                                            Width="28"/>
                                    
                                    <Grid x:Name="PART_MonthView" 
                                          Visibility="Visible" 
                                          Grid.ColumnSpan="3" 
                                          Grid.Row="1" 
                                          Margin="6,-1,6,6" 
                                          HorizontalAlignment="Center">
                                        
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>                                        
                                    </Grid>
                                    
                                    <Grid x:Name="PART_YearView" 
                                          Visibility="Hidden" 
                                          Grid.ColumnSpan="3" Grid.Row="1" 
                                          HorizontalAlignment="Center" Margin="6,-3,7,6">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                    </Grid>
                                </Grid>
                            </Border>
                        </Border>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Year">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Decade">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    
    <Style TargetType="{x:Type Calendar}">
        <Setter Property="CalendarButtonStyle" Value="{StaticResource CalendarButtonStyle}"/>
        <Setter Property="CalendarDayButtonStyle" Value="{StaticResource CalendarDayButtonStyle}"/>
        <Setter Property="CalendarItemStyle" Value="{StaticResource CalendarItemStyle}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Calendar}">
                    <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
                        <CalendarItem x:Name="PART_CalendarItem" 
                                      BorderBrush="{TemplateBinding BorderBrush}" 
                                      BorderThickness="{TemplateBinding BorderThickness}" 
                                      Background="{TemplateBinding Background}"
                                      Style="{TemplateBinding CalendarItemStyle}"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource ControlDisabledBackground}"/>
            </Trigger>           
            <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="Background" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>-->
                <Setter Property="BorderBrush" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->

    <!--#region CheckBox-->
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="MinHeight" Value="16"/>
        <!--<Setter Property="Height" Value="20"/>-->
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" 
                          Background="Transparent" 
                          SnapsToDevicePixels="True" 
                          Margin="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MinWidth="16"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                HorizontalAlignment="Center" 
                                VerticalAlignment="Center" 
                                Height="16" 
                                Width="16" 
                                Margin="0"
                                CornerRadius="{StaticResource DefaultCornerRadius}">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark"
                                      Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " 
                                      Fill="{DynamicResource ControlGlythColor}" 
                                      Margin="1" 
                                      Opacity="0" 
                                      Stretch="None"
                                      VerticalAlignment="Center" 
                                      HorizontalAlignment="Center"/>
                                <Rectangle x:Name="indeterminateMark" 
                                           Fill="{DynamicResource ControlGlythColor}" 
                                           Margin="3" 
                                           Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" 
                                          Grid.Column="1" 
                                          Focusable="False" 
                                          HorizontalAlignment="Left" 
                                          RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="Center" 
                                          Margin="3,0,0,0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource ControlMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource ControlMouseOverBorderBrush}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource ControlPrimaryMouseOverGlythColor}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource ControlPrimaryMouseOverGlythColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource ControlDisabledGlythColor}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource ControlDisabledGlythColor}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ControlDisabledForeground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource ControlSelectedBackground}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource ControlSelectedBorderBrush}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource ControlPrimarySelectedGlythColor}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource ControlPrimarySelectedGlythColor}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource ControlPrimarySelectedMouseOverGlythColor}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource ControlPrimarySelectedMouseOverGlythColor}"/>
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--https://stackoverflow.com/a/56616523-->
    <Style x:Key="SliderCheckBox" TargetType="{x:Type CheckBox}" >
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="MinWidth" Value="24" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">

                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnChecking">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Thumb"
                                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.6000000" Value="8"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="OnUnchecking">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Thumb"
                                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.6000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Grid MinWidth="{TemplateBinding MinWidth}">
                        <Border Margin="1,0,1,0" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                CornerRadius="8" Height="16" 
                                BorderBrush="{DynamicResource ControlDefaultBorderBrush}"
                                Background="Transparent" x:Name="RangeBorder" />

                        <Ellipse x:Name="Thumb" 
                                 Width="16" Height="16" 
                                 Fill="{TemplateBinding Background}" 
                                 StrokeThickness="1" 
                                 HorizontalAlignment="Left"
                                 Stroke="{DynamicResource ControlDefaultForeground}">
                            <Ellipse.RenderTransform>
                                <TransformGroup>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </Ellipse.RenderTransform>
                        </Ellipse>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--You can modify your own style changes here-->

                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Thumb" Property="Fill" Value="{DynamicResource AccentBrush}"/>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource OnUnchecking}" x:Name="OnUnchecking_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource OnChecking}" x:Name="OnChecking_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    
    <!--#region Colorpicker-->
    <!--https://github.com/PixiEditor/ColorPicker-->
    <Style TargetType="UserControl" x:Key="DefaultColorPickerStyle">
        <Style.Resources>
            <ResourceDictionary>
                <Style TargetType="Grid" >
                    <Style.Triggers>
                        <Trigger Property="Name" Value="MainGrid">
                            <Setter Property="Background" Value="{DynamicResource ContainerBackground}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </ResourceDictionary>
        </Style.Resources>
    </Style>
    <!--#endregion-->
    
    <!--#region ComboBox and ComboBoxItems-->
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True"
                            CornerRadius="{StaticResource DefaultCornerRadius}">
                        <Border x:Name="splitBorder"
                                BorderBrush="Transparent" BorderThickness="1 0 0 0" 
                                HorizontalAlignment="Right" Margin="0" 
                                SnapsToDevicePixels="True" 
                                Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                CornerRadius="{StaticResource DefaultCornerRadiusRight}">
                            <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" 
                                  Fill="{DynamicResource ControlGlythColor}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ControlDefaultBackground}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ControlDefaultBorderBrush}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ControlDefaultBackground}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ControlDefaultBorderBrush}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource ControlMouseOverGlythColor}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource ControlSelectedBackground}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ControlPrimarySelectedBackground}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ControlPrimarySelectedBackground}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ControlPrimarySelectedBackground}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource ControlDisabledGlythColor}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            
            <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" 
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                   Margin="1" Placement="Bottom"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" 
                                               MaxHeight="{TemplateBinding MaxDropDownHeight}" 
                                               MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <!-- Dropdown stuff -->
                    <Border x:Name="dropDownBorder" 
                            BorderThickness="1" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            Background="{DynamicResource ContainerBackground}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" 
                                            Height="{Binding ActualHeight, ElementName=dropDownBorder}" 
                                            Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" 
                                            KeyboardNavigation.DirectionalNavigation="Contained" 
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
                
            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" 
                          BorderThickness="{TemplateBinding BorderThickness}"                           
                          Background="{TemplateBinding Background}" Grid.ColumnSpan="2"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                          Style="{StaticResource ComboBoxToggleButton}"/>
                
            <ContentPresenter x:Name="contentPresenter" 
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                              Content="{TemplateBinding SelectionBoxItem}" 
                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                              IsHitTestVisible="False" Margin="{TemplateBinding Padding}" 
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource ControlPrimaryCaretSelectionBackground}"/>
        <Setter Property="SelectionOpacity" Value="0.7"/>
        <Setter Property="CaretBrush" Value="{DynamicResource ControlPrimaryCaretBackground}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True"
                            CornerRadius="{StaticResource DefaultCornerRadiusLeft}" >
                        <ScrollViewer x:Name="PART_ContentHost" 
                                      Background="Transparent"
                                      Focusable="False" 
                                      HorizontalScrollBarVisibility="Hidden" 
                                      VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            
            <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" 
                   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   Placement="Bottom">
                <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent"
                                               MaxHeight="{TemplateBinding MaxDropDownHeight}" 
                                               MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <!-- Dropdown stuff editable -->
                    <Border x:Name="dropDownBorder" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1"
                            Background="{DynamicResource ContainerBackground}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" 
                                               Fill="{Binding Background, ElementName=dropDownBorder}" 
                                               Height="{Binding ActualHeight, ElementName=dropDownBorder}" 
                                               Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" 
                                                KeyboardNavigation.DirectionalNavigation="Contained" 
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            
            <ToggleButton x:Name="toggleButton" 
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"                           
                          Background="{TemplateBinding Background}" 
                          Grid.ColumnSpan="2" 
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource ComboBoxToggleButton}"/>
            
            <Border x:Name="border"
                    Background="{DynamicResource BackgroundColor}" 
                    Margin="{TemplateBinding BorderThickness}"
                    CornerRadius="{StaticResource DefaultCornerRadius}">
                <TextBox x:Name="PART_EditableTextBox"
                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                         IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" 
                         Style="{StaticResource ComboBoxEditableTextBox}" />
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="PART_EditableTextBox" Value="{DynamicResource ControlDisabledBackground}"/>
                <Setter Property="Foreground" TargetName="PART_EditableTextBox" Value="{DynamicResource ControlDisabledForeground}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ControlDisabledForeground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource ControlDisabledForeground}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource ControlSelectedForeground}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlPrimarySelectedBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlPrimarySelectedMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlPrimarySelectedMouseOverBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlPrimarySelectedBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    
    <!--#region ContextMenu-->
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Themes:SystemDropShadowChrome Name="Shdw"
                                                   Themes:SystemDropShadowChrome.Color="Transparent" 
                                                   Themes:SystemDropShadowChrome.CornerRadius="0" 
                                                   SnapsToDevicePixels="True">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="2">
                            <ScrollViewer x:Name="ScrollViewer" 
                                          VerticalScrollBarVisibility="Hidden">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="True">
                            <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shdw" Property="Themes:SystemDropShadowChrome.Color" Value="#71000000" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    
    <!--#region DataGrid-->
    <!--https://gist.github.com/chrdavis/288d743362b963b875832cc493d2cc94-->
    <!--Style and template for the button in the upper left corner of the DataGrid.-->  
    <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <!--<Border x:Name="Border"
                                BorderBrush="{DynamicResource ControlBrightDefaultBorderBrush}"
                                BorderThickness="0,0,1,1"
                                Background="{DynamicResource ControlDefaultBackground}">
                            <Polygon
                            x:Name="Arrow"
                            Margin="8,8,3,3"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Bottom"
                            Fill="{DynamicResource ControlGlythColor}"
                            Opacity="0.15"
                            Points="0,10 10,10 10,0"
                            Stretch="Uniform" />
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="Background">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlMouseOverBackground}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="Background">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlSelectedBackground}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(UIElement.Visibility)">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Border>-->
                        <Rectangle
                            x:Name="Border"
                            Fill="{DynamicResource ControlDefaultBackground}"
                            SnapsToDevicePixels="True"
                            Stroke="{DynamicResource ControlBrightDefaultBorderBrush}" />
                        <Polygon
                            x:Name="Arrow"
                            Margin="8,8,3,3"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Bottom"
                            Fill="{DynamicResource ControlGlythColor}"
                            Opacity="0.15"
                            Points="0,10 10,10 10,0"
                            Stretch="Uniform" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlMouseOverBackground}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlSelectedBackground}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

      <!--Style and template for the DataGrid.-->  
    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}" />
        <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource ControlDefaultBorderBrush}" />
        <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource ControlDefaultBorderBrush}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border
                        x:Name="border"
                        Padding="{TemplateBinding Padding}"
                        Background="Transparent"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        SnapsToDevicePixels="True">
                        <ScrollViewer
                            x:Name="DG_ScrollViewer"
                            Background="Transparent"
                            Focusable="False">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>

                                        <Button
                                            Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                            Command="{x:Static DataGrid.SelectAllCommand}"
                                            Focusable="False"
                                            Style="{StaticResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle,
                                                                                          TypeInTargetAssembly={x:Type DataGrid}}}"
                                            Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />

                                        <DataGridColumnHeadersPresenter
                                            x:Name="PART_ColumnHeadersPresenter"
                                            Grid.Column="1"
                                            Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />

                                        <ScrollContentPresenter
                                            x:Name="PART_ScrollContentPresenter"
                                            Grid.Row="1"
                                            Grid.ColumnSpan="2"
                                            CanContentScroll="{TemplateBinding CanContentScroll}" />

                                        <ScrollBar
                                            x:Name="PART_VerticalScrollBar"
                                            Grid.Row="1"
                                            Grid.Column="2"
                                            Maximum="{TemplateBinding ScrollableHeight}"
                                            Orientation="Vertical"
                                            ViewportSize="{TemplateBinding ViewportHeight}"
                                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                            Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />

                                        <Grid Grid.Row="2" Grid.Column="1">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>

                                            <ScrollBar
                                                x:Name="PART_HorizontalScrollBar"
                                                Grid.Column="1"
                                                Maximum="{TemplateBinding ScrollableWidth}"
                                                Orientation="Horizontal"
                                                ViewportSize="{TemplateBinding ViewportWidth}"
                                                Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                                Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlDefaultBackground}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Normal" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsGrouping" Value="True">
                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </Trigger>
        </Style.Triggers>
    </Style>

      <!--Style and template for the DataGridCell.-->  
    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border
                        x:Name="border"
                        Background="Transparent"
                        BorderBrush="Transparent"
                        BorderThickness="1"
                        SnapsToDevicePixels="True">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Unfocused" />
                                <VisualState x:Name="Focused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CurrentStates">
                                <VisualState x:Name="Regular" />
                                <VisualState x:Name="Current">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ContainerBorderBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

      <!--Style and template for the DataGridRow.-->  
    <Style TargetType="{x:Type DataGridRow}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="Margin" Value="0"/>
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock
                        Margin="2,0,0,0"
                        VerticalAlignment="Center"
                        Foreground="{DynamicResource ValidationBrush}"
                        Text="!" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Border
                        x:Name="DGR_Border"
                        Background="Transparent"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"                        
                        SnapsToDevicePixels="True">
                        <SelectiveScrollingGrid>
                            <SelectiveScrollingGrid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </SelectiveScrollingGrid.ColumnDefinitions>
                            <SelectiveScrollingGrid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </SelectiveScrollingGrid.RowDefinitions>
                            <DataGridCellsPresenter
                                Grid.Column="1"
                                ItemsPanel="{TemplateBinding ItemsPanel}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <DataGridDetailsPresenter
                                Grid.Row="1"
                                Grid.Column="1"
                                SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                Visibility="{TemplateBinding DetailsVisibility}" />
                            <DataGridRowHeader
                                Grid.RowSpan="2"
                                SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                                Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                        </SelectiveScrollingGrid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />

                                  <!--Provide a different appearance for every other row.-->  
                                <VisualState x:Name="Normal_AlternatingRow">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlDefaultBackground}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                
                                <!--In this example, a row in Editing or selected mode has an
                                identical appearances. In other words, the states
                                Normal_Selected, Unfocused_Selected, Normal_Editing,
                                MouseOver_Editing, MouseOver_Unfocused_Editing,
                                and Unfocused_Editing are identical.-->
                                
                                <VisualState x:Name="Normal_Selected">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlPrimarySelectedBackground}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(TextBlock.Foreground)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlSelectedForeground}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Unfocused_Selected">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlDefaultBackground}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Normal_Editing">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlDefaultBackground}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="MouseOver_Editing">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlPrimaryMouseOverBackground}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="MouseOver_Unfocused_Editing">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlPrimaryMouseOverBackground}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Unfocused_Editing">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlDefaultBackground}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlPrimaryMouseOverBackground}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                
                                <!--In this example, the appearance of a selected row
                                that has the mouse over it is the same regardless of
                                whether the row is selected.  In other words, the states
                                MouseOver_Editing and MouseOver_Unfocused_Editing are identical.-->
                                
                                <VisualState x:Name="MouseOver_Selected">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlPrimarySelectedMouseOverBorderBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(TextBlock.Foreground)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlSelectedForeground}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="MouseOver_Unfocused_Selected">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlSelectedForeground}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(TextBlock.Foreground)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlSelectedForeground}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsNewItem" Value="True">
                <Setter Property="Margin" Value="1,0,0,0"/>
            </Trigger>
        </Style.Triggers>
    </Style>

      <!--Style and template for the resize control on the DataGridRowHeader.-->  
    <Style x:Key="RowHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Height" Value="8" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Cursor" Value="SizeNS" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

      <!--Style and template for the DataGridRowHeader.-->  
    <Style TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Grid>
                        <Border
                            x:Name="rowHeaderBorder"
                            Width="10"
                            Background="{DynamicResource ControlDefaultBackground}"
                            BorderBrush="{DynamicResource ControlBrightDefaultBorderBrush}"
                            BorderThickness="0,0,1,1">
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <Control SnapsToDevicePixels="False"
                                         Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"
                                         Visibility="{Binding (Validation.HasError), Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" />
                            </StackPanel>
                        </Border>

                        <Thumb
                            x:Name="PART_TopHeaderGripper"
                            VerticalAlignment="Top"
                            Style="{StaticResource RowHeaderGripperStyle}" />
                        <Thumb
                            x:Name="PART_BottomHeaderGripper"
                            VerticalAlignment="Bottom"
                            Style="{StaticResource RowHeaderGripperStyle}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

      <!--Style and template for the resize control on the DataGridColumnHeader.-->  
    <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="8" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Cursor" Value="SizeWE" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

      <!--Style and template for the DataGridColumnHeader.-->  
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource ControlDarkerBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border
                            x:Name="BackgroundBorder"
                            Grid.ColumnSpan="2"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0,0,1,1" />
                        <ContentPresenter
                            Grid.Column="0"
                            Margin="6,3,6,3"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Path
                            x:Name="SortArrow"
                            Grid.Column="1"
                            Width="8"
                            Height="6"
                            Margin="2,0,5,0"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="M0,0 L1,0 0.5,1 z"
                            Fill="{DynamicResource ControlDefaultForeground}"
                            Opacity="0.5"
                            RenderTransformOrigin="0.5,0.4"
                            Stretch="Fill"
                            Visibility="Collapsed" />
                        <Thumb
                            x:Name="PART_LeftHeaderGripper"
                            HorizontalAlignment="Left"
                            Style="{StaticResource ColumnHeaderGripperStyle}" />
                        <Thumb
                            x:Name="PART_RightHeaderGripper"
                            HorizontalAlignment="Right"
                            Style="{StaticResource ColumnHeaderGripperStyle}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                            <Setter TargetName="SortArrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource ControlMouseOverBackground}" />
                            <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="{DynamicResource ControlMouseOverBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

      <!--Style and template for the DataGridColumnHeadersPresenter.-->  
    <Style TargetType="{x:Type DataGridColumnHeadersPresenter}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
                    <Grid>
                        <DataGridColumnHeader x:Name="PART_FillerColumnHeader" IsHitTestVisible="False" />
                        <ItemsPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region DatePicker-->
    <!--https://docs.microsoft.com/de-de/dotnet/desktop/wpf/controls/datepicker-styles-and-templates?view=netframeworkdesktop-4.8-->
    <!--In this example, an implecit style for Calendar is defined elsewhere in the application. 
        DatePickerCalendarStyle is based on the implicit style so that the DatePicker will use the application's calendar style.-->
    <Style x:Key="DatePickerCalendarStyle" TargetType="{x:Type Calendar}" BasedOn="{StaticResource {x:Type Calendar}}" />

    <!--The template for the button that displays the calendar.-->
    <Style x:Key="DropDownButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Grid Background="#11FFFFFF"
                              FlowDirection="LeftToRight"
                              HorizontalAlignment="Center"
                              Height="18"
                              Margin="0"
                              VerticalAlignment="Center"
                              Width="19">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="20*" />
                                <ColumnDefinition Width="20*" />
                                <ColumnDefinition Width="20*" />
                                <ColumnDefinition Width="20*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="23*" />
                                <RowDefinition Height="19*" />
                                <RowDefinition Height="19*" />
                                <RowDefinition Height="19*" />
                            </Grid.RowDefinitions>

                            <Border x:Name="Highlight"
                                    BorderThickness="1"
                                    Grid.ColumnSpan="4"
                                    CornerRadius="0"
                                    Margin="-1"
                                    Opacity="1"
                                    Grid.Row="0"
                                    Grid.RowSpan="4" >

                                <Border.BorderBrush>
                                    <SolidColorBrush Color="Transparent" />
                                </Border.BorderBrush>
                            </Border>

                            <Border x:Name="Background"
                                    Grid.ColumnSpan="4"
                                    CornerRadius="0"
                                    Margin="0,-1,0,0"
                                    Opacity="1"
                                    Grid.Row="1"
                                    Grid.RowSpan="3">

                                <Border.Background>
                                    <SolidColorBrush Color="Transparent" />
                                </Border.Background>
                            </Border>
                            <Border Grid.ColumnSpan="4" 
                                    Grid.RowSpan="1" 
                                    BorderThickness="0.5"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{DynamicResource AccentBrush}" >

                                <Ellipse 
                                     Fill="#FFFFFFFF"
                                     HorizontalAlignment="Center"
                                     Height="3"
                                     StrokeThickness="0"
                                     VerticalAlignment="Center"
                                     Width="3" />
                            </Border>
                            
                            <Border x:Name="BackgroundGradient"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{TemplateBinding Background}"
                                    BorderThickness="0.5,0,0.5,0.5"
                                    Grid.ColumnSpan="4"
                                    Margin="0"
                                    Opacity="1"
                                    Grid.Row="1"
                                    Grid.RowSpan="3">
                            </Border>
                            
                            <Path x:Name="Item15"
                                  Fill="{DynamicResource ControlDefaultForeground}"
                                  Grid.Row="1"
                                  Grid.Column="0"
                                  Grid.RowSpan="3"
                                  Grid.ColumnSpan="4"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  RenderTransformOrigin="0.5,0.5"
                                  Margin="4,3,4,3"
                                  Stretch="Fill"
                                  Data="M11.426758,8.4305077 L11.749023,8.4305077 
                                        L11.749023,16.331387 L10.674805,16.331387 
                                        L10.674805,10.299648 L9.0742188,11.298672
                                        L9.0742188,10.294277 C9.4788408,10.090176 
                                        9.9094238,9.8090878 10.365967,9.4510155 
                                        C10.82251,9.0929432 11.176106,8.7527733 
                                        11.426758,8.4305077 z M14.65086,8.4305077 
                                        L18.566387,8.4305077 L18.566387,9.3435936 
                                        L15.671368,9.3435936 L15.671368,11.255703 
                                        C15.936341,11.058764 16.27293,10.960293 
                                        16.681133,10.960293 C17.411602,10.960293 
                                        17.969301,11.178717 18.354229,11.615566 
                                        C18.739157,12.052416 18.931622,12.673672
                                        18.931622,13.479336 C18.931622,15.452317 
                                        18.052553,16.438808 16.294415,16.438808
                                        C15.560365,16.438808 14.951641,16.234707 
                                        14.468243,15.826504 L14.881817,14.929531
                                        C15.368796,15.326992 15.837872,15.525723 
                                        16.289043,15.525723 C17.298809,15.525723 
                                        17.803692,14.895514 17.803692,13.635098 
                                        C17.803692,12.460618 17.305971,11.873379 
                                        16.310528,11.873379 C15.83071,11.873379 
                                        15.399232,12.079271 15.016094,12.491055
                                        L14.65086,12.238613 z" />

                            <Border x:Name="DisabledVisual"
                                    BorderBrush="#B2FFFFFF"
                                    BorderThickness="1"
                                    Grid.ColumnSpan="4"
                                    Opacity="0"
                                    Grid.Row="0"
                                    Grid.RowSpan="4" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                            <Setter Property="Background" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="Fill" TargetName="Item15" Value="{DynamicResource ControlDisabledForeground}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlPrimarySelectedBackground}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!--https://stackoverflow.com/questions/44020869/wpf-datepicker-textbox-white-border-not-editable-->
    <Style x:Key="DatePickerTextBoxStyle" TargetType="{x:Type DatePickerTextBox}">

        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>        
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePickerTextBox}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="WatermarkStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unwatermarked"/>
                                <VisualState x:Name="Watermarked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0" 
                                                         Storyboard.TargetProperty="Opacity" 
                                                         Storyboard.TargetName="ContentElement"/>
                                        <DoubleAnimation Duration="0" To="1" 
                                                         Storyboard.TargetProperty="Opacity" 
                                                         Storyboard.TargetName="PART_Watermark"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" 
                                                         Storyboard.TargetProperty="Opacity" 
                                                         Storyboard.TargetName="FocusVisual"/>
                                    </Storyboard>
                                </VisualState>                               
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border"                                 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                Opacity="1" 
                                Padding="{TemplateBinding Padding}">
                            
                            <Grid x:Name="WatermarkContent" 
                                  HorizontalAlignment="{TemplateBinding HorizontalAlignment}" 
                                  VerticalAlignment="{TemplateBinding VerticalAlignment}" >
                               
                                <Border x:Name="ContentElement" 
                                        BorderBrush="{TemplateBinding BorderBrush}" 
                                        BorderThickness="0.5" 
                                        Visibility="Visible"/>
                               
                                <Border x:Name="watermark_decorator" 
                                        BorderBrush="{DynamicResource ControlDefaultBorderBrush}" 
                                        BorderThickness="0.5" 
                                        Visibility="Visible">
                                    <ContentControl x:Name="PART_Watermark" 
                                                    Focusable="False" 
                                                    IsHitTestVisible="False" 
                                                    Opacity="0" 
                                                    Padding="2" 
                                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                    Foreground="{DynamicResource ControlDisabledForeground}" />
                                </Border>

                                <ScrollViewer x:Name="PART_ContentHost" Margin="0"     
                                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"                                                                                         
                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>

                                <Border x:Name="FocusVisual" 
                                        BorderBrush="{DynamicResource ControlPrimarySelectedBorderBrush}" 
                                        CornerRadius="1" 
                                        IsHitTestVisible="False" 
                                        Opacity="0"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" TargetName="watermark_decorator" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                            <Setter Property="BorderBrush" TargetName="ContentElement" Value="{DynamicResource ControlDisabledBackground}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="watermark_decorator" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                            <Setter Property="BorderBrush" TargetName="ContentElement" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="watermark_decorator" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                            <Setter Property="BorderBrush" TargetName="ContentElement" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource ControlDisabledBackground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ControlDisabledBorderBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type DatePicker}"  >
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}" />
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="SelectedDateFormat" Value="Short" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <!--Set CalendarStyle to DatePickerCalendarStyle.-->
        <Setter Property="CalendarStyle" Value="{DynamicResource DatePickerCalendarStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" 
                            Padding="{TemplateBinding Padding}"
                            BorderBrush="{TemplateBinding BorderBrush}">

                        <!--<VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1"
                                                         Storyboard.TargetProperty="Opacity"
                                                         Storyboard.TargetName="PART_DisabledVisual" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>-->

                        <Grid x:Name="PART_Root"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Button x:Name="PART_Button"
                                    Grid.Column="1"
                                    Foreground="{TemplateBinding Foreground}"
                                    Focusable="False"
                                    HorizontalAlignment="Left"
                                    Margin="3,0,3,0"
                                    Grid.Row="0"
                                    Style="{StaticResource DropDownButtonStyle}"
                                    VerticalAlignment="Top" />

                            <DatePickerTextBox x:Name="PART_TextBox" 
                                               Style="{DynamicResource DatePickerTextBoxStyle}"
                                               Grid.Column="0" Grid.Row="0" />

                            <!--<Grid x:Name="PART_DisabledVisual"
                                  Grid.ColumnSpan="2"
                                  Grid.Column="0"
                                  IsHitTestVisible="False"
                                  Opacity="0"
                                  Grid.Row="0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                --><!--<Rectangle Grid.Column="0"
                                           Fill="#A5FFFFFF"
                                           RadiusY="1"
                                           Grid.Row="0"
                                           RadiusX="1" />--><!--
                                <Rectangle Grid.Column="1"
                                           Fill="#A5FFFFFF"
                                           Height="18"
                                           Margin="3,0,3,0"
                                           RadiusY="1"
                                           Grid.Row="0"
                                           RadiusX="1"
                                           Width="19" />
                            </Grid>-->
                            <Popup x:Name="PART_Popup"
                                       AllowsTransparency="True"
                                       Placement="Bottom"
                                       PlacementTarget="{Binding ElementName=PART_TextBox}"
                                       StaysOpen="False" />
                        </Grid>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--#endregion-->
   
    <!--#region Expander-->
    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{DynamicResource ControlDefaultBackground}" HorizontalAlignment="Center" Height="19" Stroke="{DynamicResource ControlDefaultBorderBrush}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="False" Stroke="{DynamicResource ControlGlythColor}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ControlDefaultForeground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ControlPrimarySelectedBackground}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ControlDefaultForeground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ControlDisabledGlythColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{DynamicResource ControlDefaultBackground}" HorizontalAlignment="Center" Height="19" 
                                         Stroke="{DynamicResource ControlDefaultBorderBrush}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="False"
                                      Stroke="{DynamicResource ControlGlythColor}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ControlDefaultForeground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ControlPrimarySelectedBackground}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ControlDefaultForeground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ControlDisabledGlythColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{DynamicResource ControlDefaultBackground}" HorizontalAlignment="Center" Height="19" 
                                         Stroke="{DynamicResource ControlDefaultBorderBrush}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="False" 
                                      Stroke="{DynamicResource ControlGlythColor}" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ControlDefaultForeground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ControlPrimarySelectedBackground}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ControlDefaultForeground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ControlDisabledGlythColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" 
                                   SnapsToDevicePixels="True" 
                                   Stroke="Black" 
                                   StrokeThickness="1" 
                                   StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Ellipse x:Name="circle" Fill="{DynamicResource ControlDefaultBackground}" HorizontalAlignment="Center" Height="19"
                                     Stroke="{DynamicResource ControlDefaultBorderBrush}" VerticalAlignment="Center" Width="19"/>
                            <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="False" 
                                  Stroke="{DynamicResource ControlDefaultForeground}" StrokeThickness="2" VerticalAlignment="Center"/>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ControlDefaultForeground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ControlPrimarySelectedBackground}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ControlDefaultForeground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource ControlDisabledGlythColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type Expander}" >
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontStyle" Value="Normal"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="True">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" 
                                          DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" 
                                          FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" 
                                          FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" 
                                          FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" 
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                          Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" 
                                          Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="False" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" 
                                              Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ControlDisabledGlythColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region GridSplitter-->
    <Style x:Key="GridSplitterPreviewStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Fill="{DynamicResource ControlDefaultBackground}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="PreviewStyle" Value="{StaticResource GridSplitterPreviewStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region GroupBox-->
    <Style TargetType="{x:Type GroupBox}" x:Key="{x:Type GroupBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="4"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="4"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" MinHeight="20"/>
                            <RowDefinition/>
                            <RowDefinition Height="4"/>
                        </Grid.RowDefinitions>
                        
                        <Border BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Grid.ColumnSpan="4" 
                                CornerRadius="0" 
                                Grid.Row="0" 
                                Grid.RowSpan="3" >
                        </Border>

                        <Border x:Name="Header" Padding="3,0"
                                Grid.Column="0" 
                                Grid.ColumnSpan="4" 
                                Grid.Row="0" 
                                Grid.RowSpan="1" Background="{TemplateBinding BorderBrush}" >
                            <ContentPresenter x:Name="contentPresenter"
                                              VerticalAlignment="Center" 
                                              ContentSource="Header" 
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>        
                        </Border>
                        
                        <ScrollViewer Focusable="False" 
                                      Padding="{TemplateBinding Padding}"
                                      Grid.ColumnSpan="2" 
                                      Grid.Column="1" 
                                      Margin="0,3,0,0" 
                                      Grid.Row="1"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <ContentPresenter /> 
                        </ScrollViewer>
                        
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource ControlDisabledForeground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Original one -->
    <Style x:Key="OriginalGroupBox" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>
                        <Border BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="4" Grid.Column="0" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3"/>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="4" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3">
                            <Border.OpacityMask>
                                <MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
                                    <Binding ElementName="Header" Path="ActualWidth"/>
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
                            </Border>
                        </Border>
                        <Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region Hyperlink-->
    <Style TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="TextDecorations" Value="Underline"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource AccentBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    <!--#region Label-->
    <Style TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="True">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ControlDisabledForeground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region ListBox and ListBoxItem-->
    <Style TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBrightDefaultBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            CornerRadius="{StaticResource DefaultCornerRadius}"
                            Padding="1" 
                            SnapsToDevicePixels="True">
                        <ScrollViewer Focusable="False" 
                                      Padding="{TemplateBinding Padding}" >
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="True"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="True">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                     
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource ControlSelectedForeground}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlPrimarySelectedBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>                            
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlSelectedMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlSelectedMouseOverBorderBrush}"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                        </MultiTrigger>
                        
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource ControlDisabledForeground}"/>
                        </Trigger>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region ListView and ListViewItem-->
    <Style TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBrightDefaultBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border x:Name="Bd" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            Padding="1" 
                            SnapsToDevicePixels="True">
                        <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Bd"  Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlDisabledBackground}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="True"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlDefaultBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlDefaultBorderBrush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}"
       TargetType="ScrollViewer">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <DockPanel Margin="{TemplateBinding Padding}">
                            <ScrollViewer DockPanel.Dock="Top"
                                          HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Hidden"
                                          Focusable="False">
                                <GridViewHeaderRowPresenter Margin="2,0,2,0"
                                          Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector,RelativeSource={RelativeSource TemplatedParent}}"
                                          AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder,RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu,RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip,RelativeSource={RelativeSource TemplatedParent}}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </ScrollViewer>

                            <ScrollContentPresenter Name="PART_ScrollContentPresenter"
                                                    KeyboardNavigation.DirectionalNavigation="Local"
                                                    CanContentScroll="True"
                                                    CanHorizontallyScroll="False"
                                                    CanVerticallyScroll="False" />
                        </DockPanel>

                        <ScrollBar Name="PART_HorizontalScrollBar"
                                   Orientation="Horizontal"
                                   Grid.Row="1"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Value="{TemplateBinding HorizontalOffset}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />

                        <ScrollBar Name="PART_VerticalScrollBar"
                                   Grid.Column="1"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Value="{TemplateBinding VerticalOffset}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GridViewColumnHeaderGripper" TargetType="Thumb">
        <Setter Property="Width" Value="18" />
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="Transparent">
                        <Rectangle HorizontalAlignment="Center"
                                   Width="1"
                                   Fill="{TemplateBinding Background}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type GridViewColumnHeader}" TargetType="GridViewColumnHeader">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridViewColumnHeader">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver"/>
                                <VisualState x:Name="Pressed" />
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="HeaderBorder"
                                BorderThickness="0,1,0,1"
                                Padding="2,0,2,0" 
                                BorderBrush="{DynamicResource ControlDefaultBorderBrush}"
                                Background="{DynamicResource ControlDefaultBackground}">
                            <ContentPresenter x:Name="HeaderContent"
                              Margin="0,0,0,1"
                              RecognizesAccessKey="True"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <Thumb x:Name="PART_HeaderGripper"
                               HorizontalAlignment="Right"
                               Margin="0,0,-9,0"
                               Style="{StaticResource GridViewColumnHeaderGripper}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="HeaderBorder"  Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="BorderBrush" TargetName="HeaderBorder" Value="{DynamicResource ControlDisabledBackground}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="HeaderBorder" Value="{DynamicResource ControlMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="HeaderBorder" Value="{DynamicResource ControlMouseOverBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="HeaderBorder" Value="{DynamicResource ControlSelectedBackground}"/>
                            <Setter Property="BorderBrush" TargetName="HeaderBorder" Value="{DynamicResource ControlSelectedBorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Role"
             Value="Floating">
                <Setter Property="Opacity"
              Value="0.7" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="GridViewColumnHeader">
                            <Canvas Name="PART_FloatingHeaderCanvas">
                                <Rectangle Fill="#60000000"
                                           Width="{TemplateBinding ActualWidth}"
                                           Height="{TemplateBinding ActualHeight}" />
                            </Canvas>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Role"
             Value="Padding">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="GridViewColumnHeader">
                            <Border Name="HeaderBorder"
                                    BorderThickness="0,1,0,1" 
                                    Background="{DynamicResource ContainerBackground}" 
                                    BorderBrush="{DynamicResource ContainerBorderBrush}">
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment"   Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">          
                    <Border x:Name="Bd"
                            Padding="2"
                            SnapsToDevicePixels="True"
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}">

                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                             <Trigger Property="IsSelected" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource ControlSelectedForeground}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                        </Trigger>
                        
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlPrimarySelectedBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlSelectedMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlSelectedMouseOverBorderBrush}"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                        </MultiTrigger>
                        
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource ControlDisabledForeground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region Menu AUSKOMMENTIERT-->
    <!--<Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="True">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="templateRoot" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid x:Name="Grid" VerticalAlignment="Center">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="Icon" 
                                              Content="{TemplateBinding Icon}" 
                                              ContentSource="Icon" 
                                              HorizontalAlignment="Center" 
                                              Height="16" Margin="3" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="Center" 
                                              Width="16"/>
                            <Path x:Name="GlyphPanel" 
                                  Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z" 
                                  Fill="{TemplateBinding Foreground}" 
                                  FlowDirection="LeftToRight" 
                                  Margin="3" 
                                  Visibility="Collapsed" 
                                  VerticalAlignment="Center"/>
                            <ContentPresenter x:Name="ContentPresenter" 
                                              ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                              Content="{TemplateBinding Header}" Grid.Column="1" 
                                              ContentStringFormat="{TemplateBinding HeaderStringFormat}" 
                                              ContentSource="Header" Margin="{TemplateBinding Padding}" 
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            <Popup x:Name="PART_Popup" 
                                   AllowsTransparency="True" 
                                   Focusable="False" 
                                   IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" 
                                   Placement="Bottom">
                                <Themes:SystemDropShadowChrome Name="Shdw" 
                                                   Themes:SystemDropShadowChrome.Color="#71000000" 
                                                   Themes:SystemDropShadowChrome.CornerRadius="0" 
                                                   SnapsToDevicePixels="True" Margin="0 0 5 5">
                                    <Border x:Name="SubMenuBorder"
                                            BorderBrush="{DynamicResource ControlDefaultBorderBrush}" 
                                            BorderThickness="1" 
                                            Background="{DynamicResource ControlDefaultBackground}"   
                                            Padding="0">
                                        <ScrollViewer x:Name="SubMenuScrollViewer" 
                                                      Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                            <Grid x:Name="Grid1" 
                                                  RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas x:Name="Canvas" 
                                                        HorizontalAlignment="Left" 
                                                        Height="Auto" 
                                                        VerticalAlignment="Stretch"
                                                        Width="22">
                                                    <Rectangle x:Name="OpaqueRect" 
                                                               Fill="{Binding Background, ElementName=SubMenuBorder}" 
                                                               Height="{Binding ActualHeight, ElementName=SubMenuBorder}" 
                                                               Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                                </Canvas>
                                                <Rectangle x:Name="Rectangle" 
                                                           Fill="{DynamicResource ControlDarkerBorderBrush}" 
                                                           HorizontalAlignment="Left" Margin="22,0,0,0" Width="1"/>
                                                <Rectangle Fill="{DynamicResource ControlBrightDefaultBackground}" 
                                                           HorizontalAlignment="Left" Margin="0" Width="22"/>
                                                <ItemsPresenter x:Name="ItemsPresenter" 
                                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                                            Grid.IsSharedSizeScope="True" 
                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                            KeyboardNavigation.TabNavigation="Cycle"/>
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </Themes:SystemDropShadowChrome>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" 
                                    TargetName="templateRoot" 
                                    Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="BorderBrush" 
                                    TargetName="templateRoot" 
                                    Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" 
                                    TargetName="templateRoot" 
                                    Value="{DynamicResource ControlDisabledGlythColor}"/>
                            <Setter Property="Background" 
                                    Value="{DynamicResource ControlDisabledBackground}"/>
                        </Trigger>
                        <Trigger Property="CanContentScroll" 
                                 SourceName="SubMenuScrollViewer" Value="False">
                            <Setter Property="Canvas.Top" 
                                    TargetName="OpaqueRect" 
                                    Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                            <Setter Property="Canvas.Left" 
                                    TargetName="OpaqueRect" 
                                    Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="DropDownMenuItemStyle" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" 
                Background="{TemplateBinding Background}" 
                SnapsToDevicePixels="True">
            <Grid Margin="-1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="13"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="20"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                <Border x:Name="GlyphPanel" 
                        BorderBrush="#FF26A0DA" 
                        BorderThickness="1" 
                        Background="#3D26A0DA" 
                        Height="22" 
                        Margin="-1,0,0,0" 
                        Visibility="Hidden" 
                        VerticalAlignment="Center" 
                        Width="22">
                    <Path x:Name="Glyph" 
                          Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z" 
                          Fill="{StaticResource RaisinBlack}" 
                          FlowDirection="LeftToRight" 
                          Height="11" 
                          Width="9"/>
                </Border>
                <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                  Content="{TemplateBinding Header}" 
                                  Grid.Column="2" 
                                  ContentStringFormat="{TemplateBinding HeaderStringFormat}" 
                                  ContentSource="Header" 
                                  HorizontalAlignment="Left" 
                                  Margin="{TemplateBinding Padding}" 
                                  RecognizesAccessKey="True" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment="Center"/>
                <TextBlock Grid.Column="4" 
                           Margin="{TemplateBinding Padding}" 
                           Opacity="0.7" 
                           Text="{TemplateBinding InputGestureText}" 
                           VerticalAlignment="Center"/>
                <Path x:Name="RightArrow" 
                      Grid.Column="5" 
                      Data="M0,0L4,3.5 0,7z" 
                      Fill="{DynamicResource ControlGlythColor}" 
                      HorizontalAlignment="Left" 
                      Margin="10,0,0,0" 
                      VerticalAlignment="Center"/>
                <Popup x:Name="PART_Popup" 
                       AllowsTransparency="True" 
                       Focusable="False" 
                       HorizontalOffset="-2" 
                       IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" 
                       Placement="Right" 
                       VerticalOffset="-3">
                    <Themes:SystemDropShadowChrome Name="Shdw" 
                                                   Themes:SystemDropShadowChrome.Color="#71000000" 
                                                   Themes:SystemDropShadowChrome.CornerRadius="0" 
                                                   SnapsToDevicePixels="True" 
                                                   Margin="0 0 5 5">
                        <Border x:Name="SubMenuBorder" 
                                BorderBrush="{DynamicResource ControlDefaultBorderBrush}" 
                                BorderThickness="1" 
                                Background="{DynamicResource ControlDefaultBackground}"   
                                Padding="0">
                            <ScrollViewer x:Name="SubMenuScrollViewer" 
                                          Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="Canvas" 
                                            HorizontalAlignment="Left" 
                                            Height="Auto" 
                                            VerticalAlignment="Stretch" 
                                            Width="22">
                                        <Rectangle x:Name="OpaqueRect" 
                                                   Fill="{Binding Background, ElementName=SubMenuBorder}" 
                                                   Height="{Binding ActualHeight, ElementName=SubMenuBorder}" 
                                                   Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                    </Canvas>
                                    <Rectangle x:Name="Rectangle" 
                                               Fill="{DynamicResource ControlDarkerBorderBrush}" 
                                               HorizontalAlignment="Left" 
                                               Margin="22,0,0,0" 
                                               Width="1"/>
                                    <Rectangle Fill="{DynamicResource ControlBrightDefaultBackground}" 
                                               HorizontalAlignment="Left" 
                                               Margin="0" 
                                               Width="22"/>
                                    <ItemsPresenter x:Name="ItemsPresenter" 
                                                    KeyboardNavigation.DirectionalNavigation="Cycle" 
                                                    Grid.IsSharedSizeScope="True" 
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                    KeyboardNavigation.TabNavigation="Cycle"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource ControlDisabledGlythColor}"/>
                <Setter Property="Fill" TargetName="Glyph" Value="{DynamicResource ControlDisabledGlythColor}"/>
                <Setter Property="Fill" TargetName="RightArrow" Value="{DynamicResource ControlDisabledGlythColor}"/>
                <Setter Property="Background" Value="{DynamicResource ControlDisabledBackground}"/>
            </Trigger>
            <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <ControlTemplate x:Key="SingleDropDownMenuItem" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" 
                Background="{TemplateBinding Background}" 
                SnapsToDevicePixels="True">
            <Grid Margin="-1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="13"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="20"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" 
                                  Content="{TemplateBinding Icon}" 
                                  ContentSource="Icon" 
                                  HorizontalAlignment="Center" 
                                  Height="16" Margin="3" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                  VerticalAlignment="Center" Width="16"/>
                <Border x:Name="GlyphPanel" 
                        BorderBrush="#FF26A0DA" 
                        BorderThickness="1" 
                        Background="#3D26A0DA" 
                        Height="22" 
                        Margin="-1,0,0,0" 
                        Visibility="Hidden" 
                        VerticalAlignment="Center" 
                        Width="22">
                    <Path x:Name="Glyph" 
                          Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z" 
                          Fill="{StaticResource RaisinBlack}" 
                          FlowDirection="LeftToRight" 
                          Height="11" 
                          Width="9"/>
                </Border>
                <ContentPresenter 
                    ContentTemplate="{TemplateBinding HeaderTemplate}" 
                    Content="{TemplateBinding Header}" 
                    Grid.Column="2" 
                    ContentStringFormat="{TemplateBinding HeaderStringFormat}" 
                    ContentSource="Header" HorizontalAlignment="Left" 
                    Margin="{TemplateBinding Padding}" 
                    RecognizesAccessKey="True" 
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                    VerticalAlignment="Center"/>
                <TextBlock Grid.Column="4" 
                           Margin="{TemplateBinding Padding}" 
                           Opacity="0.7" 
                           Text="{TemplateBinding InputGestureText}" 
                           VerticalAlignment="Center"/>
                <Path x:Name="RightArrow" 
                      Grid.Column="5" 
                      Data="M0,0L4,3.5 0,7z" 
                      Visibility="Hidden" 
                      Fill="{DynamicResource ControlGlythColor}" 
                      HorizontalAlignment="Left" 
                      Margin="10,0,0,0" 
                      VerticalAlignment="Center"/>
                <Popup x:Name="PART_Popup" 
                       AllowsTransparency="True" 
                       Focusable="False" 
                       HorizontalOffset="-2" 
                       IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" 
                       Placement="Right" 
                       VerticalOffset="-3">
                    <Border x:Name="SubMenuBorder" 
                            BorderBrush="{DynamicResource ControlDefaultBorderBrush}" 
                            BorderThickness="1" 
                            Background="{DynamicResource ControlDefaultBackground}"   
                            Padding="0">
                        <ScrollViewer x:Name="SubMenuScrollViewer" 
                                      Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="Canvas" 
                                        HorizontalAlignment="Left" 
                                        Height="Auto" 
                                        VerticalAlignment="Stretch" 
                                        Width="22">
                                    <Rectangle x:Name="OpaqueRect" 
                                               Fill="{Binding Background, ElementName=SubMenuBorder}" 
                                               Height="{Binding ActualHeight, ElementName=SubMenuBorder}" 
                                               Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                </Canvas>
                                <Rectangle x:Name="Rectangle" 
                                           Fill="{DynamicResource ControlDarkerBorderBrush}" 
                                           HorizontalAlignment="Left" 
                                           Margin="22,0,0,0" 
                                           Width="1"/>
                                <Rectangle Fill="{DynamicResource ControlBrightDefaultBackground}" 
                                           HorizontalAlignment="Left" 
                                           Margin="0"
                                           Width="22"/>
                                <ItemsPresenter x:Name="ItemsPresenter" 
                                                KeyboardNavigation.DirectionalNavigation="Cycle" 
                                                Grid.IsSharedSizeScope="True" 
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource ControlDisabledGlythColor}"/>
                <Setter Property="Fill" TargetName="Glyph" Value="{DynamicResource ControlDisabledGlythColor}"/>
                <Setter Property="Fill" TargetName="RightArrow" Value="{DynamicResource ControlDisabledGlythColor}"/>
                <Setter Property="Background" Value="{DynamicResource ControlDisabledBackground}"/>
            </Trigger>
            <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>-->
    <!--#endregion-->

    <!--#region Password Box-->
    <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="PasswordChar" Value="●"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource ControlPrimaryCaretBackground}"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource ControlPrimaryCaretSelectionBackground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="border" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"
                            CornerRadius="{StaticResource DefaultCornerRadius}"
                            SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="False" 
                                      HorizontalScrollBarVisibility="Hidden" 
                                      VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ControlDisabledForeground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ControlDisabledBorderBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource ControlDisabledGlythColor}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->

    <!--#region ProgressBar-->
    <!--https://stackoverflow.com/a/30376773-->
    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource ControlPrimaryDefaultBackground}"/>
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid Name="TemplateRoot" SnapsToDevicePixels="true">
                        <Rectangle Fill="{TemplateBinding Background}"/>
                        <Rectangle Name="PART_Track" Margin="0"/>
                        <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" Margin="0">
                            <Grid Name="Foreground">
                                <Rectangle Fill="{TemplateBinding Foreground}" Name="Indicator"/>
                                <Grid x:Name="Animation" 
                                      ClipToBounds="true"
                                      Visibility="Hidden">
                                    <Rectangle Fill="{TemplateBinding Background}" 
                                               Name="HiderPre" 
                                               Margin="0,0,50,0">
                                        <Rectangle.RenderTransform>
                                            <ScaleTransform x:Name="HiderPreTransform" ScaleX="0"/>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                    <Rectangle Fill="{TemplateBinding Background}"
                                               Name="HiderPost" 
                                               RenderTransformOrigin="1, 0"
                                               Margin="50,0,0,0">
                                        <Rectangle.RenderTransform>
                                            <ScaleTransform x:Name="HiderPostTransform" ScaleX="1"/>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                </Grid>
                                <Grid Name="Overlay"/>
                            </Grid>
                        </Decorator>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" 
                                BorderBrush="{TemplateBinding BorderBrush}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter TargetName="Animation" Property="Visibility" Value="Visible"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimation Storyboard.TargetName="HiderPreTransform" 
                                                         Storyboard.TargetProperty="(ScaleTransform.ScaleX)" 
                                                         To="1" Duration="0:00:4" AutoReverse="True"/>
                                        <DoubleAnimation Storyboard.TargetName="HiderPostTransform" 
                                                         Storyboard.TargetProperty="(ScaleTransform.ScaleX)" 
                                                         To="0" Duration="0:00:4" AutoReverse="True"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ControlDisabledForeground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->

    <!--#region RadioButton-->
    <Style TargetType="{x:Type RadioButton}" x:Key="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinHeight" Value="16"/>
        <!--<Setter Property="Height" Value="20"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot"  
                          Background="Transparent" 
                          SnapsToDevicePixels="True" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MinWidth="16"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <BulletDecorator Background="Transparent" 
                                         VerticalAlignment="Center">
                            <BulletDecorator.Bullet>
                                <Grid Width="13" 
                                      Height="13">
                                    <Ellipse x:Name="Border"
                                             StrokeThickness="1"
                                             Stroke="{DynamicResource ControlDefaultBorderBrush}"
                                             Fill="{DynamicResource BackgroundColor}">
         
                                    </Ellipse>
                                    <Ellipse x:Name="checkMark"
                                             Margin="3"
                                             Stroke="{DynamicResource ControlGlythColor}"
                                             Fill="Transparent"
                                             Opacity="1">                               
                                    </Ellipse>
                                </Grid>
                            </BulletDecorator.Bullet>
                        </BulletDecorator>
                        <ContentPresenter x:Name="contentPresenter" 
                                          Grid.Column="1" 
                                          Focusable="False"
                                          HorizontalAlignment="Left" 
                                          RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="Center" 
                                          Margin="3 0 0 0" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Opacity" TargetName="checkMark" Value="0"/>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Fill" TargetName="checkMark" Value="{DynamicResource ControlGlythColor}"/>
                        </Trigger>
                                                
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="Border" Value="{DynamicResource ControlMouseOverBackground}"/>
                            <Setter Property="Stroke" TargetName="Border" Value="{DynamicResource ControlMouseOverBorderBrush}"/>
                            
                            <Setter Property="Fill" TargetName="checkMark" Value="{DynamicResource ControlPrimaryMouseOverGlythColor}"/>
                            <Setter Property="Stroke" TargetName="checkMark" Value="{DynamicResource ControlPrimaryMouseOverGlythColor}"/>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Fill" TargetName="checkMark" Value="Transparent"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Border" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="Stroke" TargetName="Border" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                            <Setter Property="Stroke" TargetName="checkMark" Value="{DynamicResource ControlDisabledGlythColor}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ControlDisabledForeground}"/>
                        </Trigger>
                        
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="checkMark" Value="{DynamicResource ControlDisabledGlythColor}"/>
                        </MultiTrigger>
                        
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="Border" Value="{DynamicResource ControlSelectedBackground}"/>
                            <Setter Property="Stroke" TargetName="Border" Value="{DynamicResource ControlSelectedBorderBrush}"/>
                            <Setter Property="Fill" TargetName="checkMark" Value="{DynamicResource ControlPrimarySelectedGlythColor}"/>
                            <Setter Property="Stroke" TargetName="checkMark" Value="{DynamicResource ControlPrimarySelectedGlythColor}"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="checkMark" Value="{DynamicResource ControlPrimarySelectedMouseOverGlythColor}"/>
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region RichTextBox AUSKOMMENTIERT-->
    <!--<Style TargetType="{x:Type RichTextBox}">
        <Style.Resources>
            <Style x:Key="{x:Type FlowDocument}" TargetType="{x:Type FlowDocument}">
                <Setter Property="OverridesDefaultStyle" Value="True"/>
            </Style>
            <Style x:Key="{x:Type Hyperlink}" BasedOn="{StaticResource {x:Type Hyperlink}}" TargetType="{x:Type Hyperlink}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="Blue"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="MinWidth" Value="10"/>
        <Style.BasedOn>
            <StaticResource ResourceKey="{x:Type TextBoxBase}"/>
        </Style.BasedOn>
    </Style>

    <Style x:Key="{x:Type TextBoxBase}" TargetType="{x:Type TextBoxBase}">
        <Setter Property="Background" Value="{DynamicResource ContainerBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource ControlPrimaryCaretBackground}"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource ControlPrimaryCaretSelectionBackground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlMouseOverBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlSelectedBorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource ControlDisabledGlythColor}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type Hyperlink}" TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground" Value="{DynamicResource ControlPrimaryCaretBackground}"/>
        <Setter Property="TextDecorations" Value="Underline"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ControlPrimaryBrightDefaultBackground}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ControlDisabledGlythColor}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>-->

    <!--#endregion-->

    <!--#region ScrollBar-->
    <Style x:Key="ScrollBarButton" TargetType="{x:Type Button}" >
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True"
                            HorizontalAlignment="Stretch" 
                            VerticalAlignment="Stretch"
                            CornerRadius="0" >
                        <ContentPresenter x:Name="contentPresenter" 
                                          Focusable="False" 
                                          Margin="{TemplateBinding Padding}" 
                                          RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">                            
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">                            
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ControlPrimarySelectedBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="True"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlBrightDefaultBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1,0"/>
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>
                        <Button x:Name="PART_LineUpButton" 
                                Command="{x:Static ScrollBar.LineUpCommand}" 
                                BorderThickness="1 1 1 0"
                                Style="{StaticResource ScrollBarButton}">
                            <Path x:Name="ArrowTop" Data="M 0,4 C0,4 0,6 0,6 0,6 3.5,2.5 3.5,2.5 3.5,2.5 7,6 7,6 7,6 7,4 7,4 7,4 3.5,0.5 3.5,0.5 3.5,0.5 0,4 0,4 z"
                                  Fill="{DynamicResource ControlGlythColor}" 
                                  Margin="3,4,3,3" 
Stretch="Uniform"/>
                        </Button>
                        
                        <Border BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="1 0 1 0" 
                                Background="{TemplateBinding Background}" 
                                Grid.Row="1">
                            <Track x:Name="PART_Track" IsDirectionReversed="True"  Grid.Row="1">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" 
                                                  Style="{StaticResource RepeatButtonTransparent}"/>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" 
                                                  Style="{StaticResource RepeatButtonTransparent}"/>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{DynamicResource ScrollBarThumbVertical}"/>
                                </Track.Thumb>
                            </Track>
                        </Border>

                        <Button x:Name="PART_LineDownButton" 
                                Command="{x:Static ScrollBar.LineDownCommand}"
                                BorderThickness="1 0 1 1"                                
                                Grid.Row="2"
                                Style="{StaticResource ScrollBarButton}">                           

                            <Path x:Name="ArrowBottom"
                                  Data="M 0,2.5 C0,2.5 0,0.5 0,0.5 0,0.5 3.5,4 3.5,4 3.5,4 7,0.5 7,0.5 7,0.5 7,2.5 7,2.5 7,2.5 3.5,6 3.5,6 3.5,6 0,2.5 0,2.5 z" 
                                  Fill="{DynamicResource ControlGlythColor}" 
                                  Margin="3,4,3,3" 
                                  Stretch="Uniform"/>
                        </Button>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="True"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ControlSelectedGlythColor}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="True"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ControlSelectedGlythColor}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="True"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource ControlMouseOverGlythColor}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="True"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ControlMouseOverGlythColor}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ControlDisabledGlythColor}"/>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource ControlDisabledGlythColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ControlBrightDefaultBorderBrush}"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    <ColumnDefinition Width="0.00001*"/>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                </Grid.ColumnDefinitions>
                                <Button x:Name="PART_LineLeftButton" 
                                        BorderThickness="1 1 0 1"
                                        Command="{x:Static ScrollBar.LineLeftCommand}" >
                                    <Path x:Name="ArrowLeft" Data="M 3.18,7 C3.18,7 5,7 5,7 5,7 1.81,3.5 1.81,3.5 1.81,3.5 5,0 5,0 5,0 3.18,0 3.18,0 3.18,0 0,3.5 0,3.5 0,3.5 3.18,7 3.18,7 z" 
                                          Fill="{DynamicResource ControlGlythColor}" Margin="3" Stretch="Uniform"/>
                                </Button>
                                <Border BorderBrush="{TemplateBinding BorderBrush}" 
                                        BorderThickness="0 1 0 1" 
                                        Background="{TemplateBinding Background}" 
                                        Grid.Column="1">
                                    <Track x:Name="PART_Track" Grid.Column="1" >
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb Style="{DynamicResource ScrollBarThumbHorizontal}"/>
                                        </Track.Thumb>
                                    </Track>
                                </Border>

                                <Button x:Name="PART_LineRightButton" Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}" 
                                        BorderThickness="0 1 1 1">
                                    <Path x:Name="ArrowRight" Data="M 1.81,7 C1.81,7 0,7 0,7 0,7 3.18,3.5 3.18,3.5 3.18,3.5 0,0 0,0 0,0 1.81,0 1.81,0 1.81,0 5,3.5 5,3.5 5,3.5 1.81,7 1.81,7 z" 
                                          Fill="{DynamicResource ControlGlythColor}" Margin="3" Stretch="Uniform"/>
                                </Button>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="True"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ControlSelectedGlythColor}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="True"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ControlSelectedGlythColor}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="True"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ControlMouseOverGlythColor}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="True"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ControlMouseOverGlythColor}"/>
                                </MultiDataTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ControlDisabledGlythColor}"/>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ControlDisabledGlythColor}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ScrollBar}" x:Key="HorizontalScrollerBar">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="True"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlBrightDefaultBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1,0"/>
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>
                        <Button x:Name="PART_LineUpButton" 
                                        Command="{x:Static ScrollBar.LineUpCommand}" 
                                        BorderThickness="1 1 1 0">
                            <Path x:Name="ArrowTop" 
                                  Data="M 0,4 C0,4 0,6 0,6 0,6 3.5,2.5 3.5,2.5 3.5,2.5 7,6 7,6 7,6 7,4 7,4 7,4 3.5,0.5 3.5,0.5 3.5,0.5 0,4 0,4 z"
                                  Fill="{DynamicResource ControlGlythColor}" 
                                  Margin="3,4,3,3" 
                                  Stretch="Uniform"/>
                        </Button>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="1 0 1 0" 
                                Background="{TemplateBinding Background}" 
                                Grid.Row="1">
                            <Track x:Name="PART_Track" 
                                   IsDirectionReversed="True" 
                                   Grid.Row="1">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" 
                                                  Style="{StaticResource RepeatButtonTransparent}"/>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" 
                                                  Style="{StaticResource RepeatButtonTransparent}"/>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{DynamicResource ScrollBarThumbVertical}"/>
                                </Track.Thumb>
                            </Track>
                        </Border>

                        <Button x:Name="PART_LineDownButton" 
                                Command="{x:Static ScrollBar.LineDownCommand}"
                                BorderThickness="1 0 1 1"
                                Grid.Row="2">
                            <Path x:Name="ArrowBottom"
                                  Data="M 0,2.5 C0,2.5 0,0.5 0,0.5 0,0.5 3.5,4 3.5,4 3.5,4 7,0.5 7,0.5 7,0.5 7,2.5 7,2.5 7,2.5 3.5,6 3.5,6 3.5,6 0,2.5 0,2.5 z" 
                                  Fill="{DynamicResource ControlGlythColor}" 
                                  Margin="3,4,3,3" Stretch="Uniform"/>
                        </Button>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="True"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowBottom" 
                                    Value="{DynamicResource ControlSelectedGlythColor}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="True"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" 
                                    Value="{DynamicResource ControlSelectedGlythColor}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="True"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" 
                                    TargetName="ArrowBottom" 
                                    Value="{DynamicResource ControlMouseOverGlythColor}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="True"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" 
                                    TargetName="ArrowTop" 
                                    Value="{DynamicResource ControlMouseOverGlythColor}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" 
                                    TargetName="ArrowTop" 
                                    Value="{DynamicResource ControlDisabledGlythColor}"/>
                            <Setter Property="Fill" 
                                    TargetName="ArrowBottom" 
                                    Value="{DynamicResource ControlDisabledGlythColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ControlBrightDefaultBorderBrush}"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="SmallChange" Value="250"/>
                <Setter Property="LargeChange" Value="500"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    <ColumnDefinition Width="0.00001*"/>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                </Grid.ColumnDefinitions>
                                <Button x:Name="PART_LineLeftButton" 
                                        BorderThickness="1"
                                        Command="{x:Static ScrollBar.LineLeftCommand}" >
                                    <Path x:Name="ArrowLeft"
                                          Data="M 3.18,7 C3.18,7 5,7 5,7 5,7 1.81,3.5 1.81,3.5 1.81,3.5 5,0 5,0 5,0 3.18,0 3.18,0 3.18,0 0,3.5 0,3.5 0,3.5 3.18,7 3.18,7 z" 
                                          Fill="{DynamicResource ControlGlythColor}" 
                                          Margin="3" 
                                          Stretch="Uniform"/>
                                </Button>

                                <Button x:Name="PART_LineRightButton" 
                                        Grid.Column="2"
                                        Command="{x:Static ScrollBar.LineRightCommand}" 
                                        BorderThickness="1">
                                    <Path x:Name="ArrowRight" 
                                          Data="M 1.81,7 C1.81,7 0,7 0,7 0,7 3.18,3.5 3.18,3.5 3.18,3.5 0,0 0,0 0,0 1.81,0 1.81,0 1.81,0 5,3.5 5,3.5 5,3.5 1.81,7 1.81,7 z" 
                                          Fill="{DynamicResource ControlGlythColor}" 
                                          Margin="3" 
                                          Stretch="Uniform"/>
                                </Button>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="True"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ControlSelectedGlythColor}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="True"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ControlSelectedGlythColor}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="True"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ControlMouseOverGlythColor}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="True"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ControlMouseOverGlythColor}"/>
                                </MultiDataTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ControlDisabledGlythColor}"/>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ControlDisabledGlythColor}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Background" Value="{DynamicResource ControlDarkerBorderBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDarkerBorderBrush}"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Height="{TemplateBinding Height}" 
                          Width="{TemplateBinding Width}">
                        <Rectangle x:Name="rectangle" 
                                   Fill="{TemplateBinding Background}" 
                                   SnapsToDevicePixels="True"
                                   StrokeThickness="0.5"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ControlMouseOverBackground}"/>
                            <Setter Property="Stroke" TargetName="rectangle" Value="{DynamicResource ControlMouseOverBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ControlMouseOverBackground}"/>
                            <Setter Property="Stroke" TargetName="rectangle" Value="{DynamicResource ControlSelectedBorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Background" Value="{DynamicResource ControlDarkerBorderBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDarkerBorderBrush}"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                        <Rectangle x:Name="rectangle" 
                                   Fill="{TemplateBinding Background}"
                                   SnapsToDevicePixels="True"
                                   StrokeThickness="0.5"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ControlMouseOverBackground}"/>
                            <Setter Property="Stroke" TargetName="rectangle" Value="{DynamicResource ControlMouseOverBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ControlMouseOverBackground}"/>
                            <Setter Property="Stroke" TargetName="rectangle" Value="{DynamicResource ControlSelectedBorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region ScrollViewer-->
    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner" Grid.Column="1" Fill="Transparent" Grid.Row="1"/>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" 
                                   Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" 
                                   Minimum="0" Grid.Row="0" 
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                   ViewportSize="{TemplateBinding ViewportHeight}" Grid.RowSpan="2"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar"
                                   Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0"
                                   Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   ViewportSize="{TemplateBinding ViewportWidth}" Grid.ColumnSpan="1"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ScrollViewer}" x:Key="HorizontalScroller">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Visible"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner" Grid.Column="1" Fill="Transparent" Grid.Row="0" Margin="0,138,0,0"/>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="18,0" Grid.Row="0"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" 
                                   Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" 
                                   Minimum="0" Grid.Row="0" 
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                   ViewportSize="{TemplateBinding ViewportHeight}" Grid.RowSpan="1" Margin="0,0,-17,0"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar"
                                   Style="{DynamicResource HorizontalScrollerBar}"
                                   Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0"
                                   Orientation="Horizontal" Grid.Row="0" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   ViewportSize="{TemplateBinding ViewportWidth}" Grid.ColumnSpan="1" Margin="0" Height="Auto"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region Separator AUSKOMMENTIERT-->
    <!--<Style TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource ControlBrightDefaultBackground}"/>
        <Setter Property="Margin" Value="0,2,0,2"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Height="1" SnapsToDevicePixels="True"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalSeparator" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource ControlBrightDefaultBackground}"/>
        <Setter Property="Width" Value="2"/>
        <Setter Property="Margin" Value="2,0,2,0"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Height="Auto" SnapsToDevicePixels="True"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MenuItemSeparator" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource ControlBrightDefaultBorderBrush}"/>
        <Setter Property="Margin" Value="0,2,0,2"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Background="{TemplateBinding Background}" Height="1" SnapsToDevicePixels="True"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
    <!--#endregion-->

    <!--#region Slider AUSKOMMENTIERT-->
    <!--<ControlTemplate x:Key="SliderThumbHorizontalTop" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,6 C0,6 5.5,0 5.5,0 5.5,0 11,6 11,6 11,6 11,18 11,18 11,18 0,18 0,18 0,18 0,6 0,6 z" 
                  Fill="{DynamicResource ControlBrightDefaultBackground}" Stretch="Fill" 
                  SnapsToDevicePixels="True" 
                  Stroke="{DynamicResource ControlBrightDefaultBorderBrush}" 
                  StrokeThickness="1" UseLayoutRounding="True" 
                  VerticalAlignment="Center"
                  StrokeLineJoin="Round"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlPrimaryDarkerBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlPrimaryDarkerBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlPrimarySelectedMouseOverBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlPrimarySelectedMouseOverBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlDisabledBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlDisabledBorderBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbHorizontalBottom" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,12 C0,12 5.5,18 5.5,18 5.5,18 11,12 11,12 11,12 11,0 11,0 11,0 0,0 0,0 0,0 0,12 0,12 z" 
                  Fill="{DynamicResource ControlBrightDefaultBackground}" Stretch="Fill"
                  SnapsToDevicePixels="True" 
                  Stroke="{DynamicResource ControlBrightDefaultBorderBrush}" 
                  StrokeThickness="1" UseLayoutRounding="True" 
                  VerticalAlignment="Center"
                  StrokeLineJoin="Round"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlPrimaryDarkerBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlPrimaryDarkerBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlPrimarySelectedMouseOverBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlPrimarySelectedMouseOverBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlDisabledBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlDisabledBorderBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <SolidColorBrush x:Key="SliderThumb.Track.Border" Color="LightGray"/>
    <SolidColorBrush x:Key="SliderThumb.Track.Background" Color="#FFE7EAEA"/>
    <ControlTemplate x:Key="SliderThumbHorizontalDefault" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Stretch" Margin="0" Width="11">
            <Rectangle x:Name="grip" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" StrokeLineJoin="Round"
                       Fill="{DynamicResource ControlBrightDefaultBackground}" SnapsToDevicePixels="True" 
                       Stroke="{DynamicResource ControlBrightDefaultBorderBrush}" StrokeThickness="1" 
                       UseLayoutRounding="True" RadiusX="1" RadiusY="1"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlPrimaryDarkerBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlPrimaryDarkerBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlPrimarySelectedMouseOverBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlPrimarySelectedMouseOverBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlDisabledBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlDisabledBorderBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TickBar x:Name="TopTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed"/>
                <TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed"/>
                <Border x:Name="TrackBackground" BorderBrush="{DynamicResource ControlDefaultBorderBrush}" BorderThickness="1" Background="{DynamicResource ControlDefaultBackground}" Height="4.0" Margin="5,0" Grid.Row="1" VerticalAlignment="center">
                    <Canvas Margin="-6,-1">
                        <Rectangle x:Name="PART_SelectionRange" Fill="Red" Height="4.0" Visibility="Hidden"/>
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Row="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Focusable="False" Height="20" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbHorizontalDefault}" VerticalAlignment="Center" Width="11"/>
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalTop}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalBottom}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="True">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbVerticalLeft" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 6,11 C6,11 0,5.5 0,5.5 0,5.5 6,0 6,0 6,0 18,0 18,0 18,0 18,11 18,11 18,11 6,11 6,11 z" 
                  Fill="{DynamicResource ControlBrightDefaultBackground}"
                  SnapsToDevicePixels="True" 
                  Stretch="Fill"
                  StrokeLineJoin="Round"
                  Stroke="{DynamicResource ControlBrightDefaultBorderBrush}" StrokeThickness="1"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlPrimaryDarkerBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlPrimaryDarkerBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlPrimarySelectedMouseOverBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlPrimarySelectedMouseOverBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlDisabledBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlDisabledBorderBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbVerticalRight" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 12,11 C12,11 18,5.5 18,5.5 18,5.5 12,0 12,0 12,0 0,0 0,0 0,0 0,11 0,11 0,11 12,11 12,11 z" 
                  Fill="{DynamicResource ControlBrightDefaultBackground}"
                  SnapsToDevicePixels="True" 
                  Stretch="Fill"
                  StrokeLineJoin="Round"
                  Stroke="{DynamicResource ControlBrightDefaultBorderBrush}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlPrimaryDarkerBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlPrimaryDarkerBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlPrimarySelectedMouseOverBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlPrimarySelectedMouseOverBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlDisabledBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlDisabledBorderBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbVerticalDefault" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Rectangle x:Name="grip" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" StrokeLineJoin="Round"
                       Fill="{DynamicResource ControlBrightDefaultBackground}" SnapsToDevicePixels="True" 
                       Stroke="{DynamicResource ControlBrightDefaultBorderBrush}" StrokeThickness="1" 
                       UseLayoutRounding="True" RadiusX="1" RadiusY="1" Width="18" Height="11"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlPrimaryDarkerBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlPrimaryDarkerBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlPrimarySelectedMouseOverBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlPrimarySelectedMouseOverBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource ControlDisabledBackground}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource ControlDisabledBorderBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderVertical" TargetType="{x:Type Slider}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TickBar x:Name="TopTick" Grid.Column="0" Fill="{TemplateBinding Foreground}" Margin="0,0,2,0" Placement="Left" Visibility="Collapsed" Width="4"/>
                <TickBar x:Name="BottomTick" Grid.Column="2" Fill="{TemplateBinding Foreground}" Margin="2,0,0,0" Placement="Right" Visibility="Collapsed" Width="4"/>
                <Border x:Name="TrackBackground" BorderBrush="{DynamicResource ControlDefaultBorderBrush}" BorderThickness="1" Background="{DynamicResource ControlDefaultBackground}" Grid.Column="1" HorizontalAlignment="center" Margin="0,5" Width="4.0">
                    <Canvas Margin="-1,-6">
                        <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Visibility="Hidden" Width="4.0"/>
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Column="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Focusable="False" Height="11" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbVerticalDefault}" VerticalAlignment="Top" Width="18"/>
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbVerticalLeft}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="2,5,0,5"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbVerticalRight}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="0,5,2,5"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="True">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type Slider}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlPrimaryGlythColor}"/>
        <Setter Property="Template" Value="{StaticResource SliderHorizontal}"/>
        <Setter Property="Minimum" Value="0"/>
        <Setter Property="Maximum" Value="100"/>
        <Setter Property="Value" Value="0"/>
        <Setter Property="IsSnapToTickEnabled" Value="True"/>
        <Setter Property="IsMoveToPointEnabled" Value="True"/>
        <Setter Property="SmallChange" Value="1"/>
        <Setter Property="LargeChange" Value="5"/>
        <Setter Property="Orientation" Value="Horizontal"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource SliderVertical}"/>
            </Trigger>
        </Style.Triggers>
    </Style>-->
    <!--#endregion-->

    <!--#region Tab Control AUSKOMMENTIERT-->
    <!--<Style TargetType="{x:Type TabControl}">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="templateRoot" ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="True" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                        <Border x:Name="contentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="1"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource ControlDisabledGlythColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="Background" Value="{DynamicResource ControlDarkerBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDarkerBorderBrush}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="6,4,6,4"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                        <Border x:Name="mainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Background="{TemplateBinding Background}" Margin="0">
                            <Border x:Name="innerBorder" 
                                    BorderBrush="{DynamicResource ControlDefaultBorderBrush}" BorderThickness="1,1,1,0" 
                                    Background="{DynamicResource BackgroundColor}" Margin="-1" Opacity="0"/>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ControlDisabledBackground}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,-2,0,-2"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,0,-2,-2"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="0,-2,-2,-2"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,-2,-2,0"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    --><!-- Alternative Styles --><!--
    <ControlTemplate x:Key="CloseButton" TargetType="{x:Type TabItem}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
            <Border x:Name="mainBorder" BorderBrush="{TemplateBinding BorderBrush}" 
                    BorderThickness="0,1,1,1" Background="{TemplateBinding Background}" Margin="0">
                <Border x:Name="innerBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,1,1,0"
                        Background="{TemplateBinding Background}" Margin="-1" Opacity="0"/>
            </Border>


            <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False"
                              HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                              Margin="10,9,36,9" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                              VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Border Height="24" VerticalAlignment="Center" HorizontalAlignment="Right" Width="24" Margin="0,8,8,7">
                <Button Background="Transparent" Command="{Binding CloseTabCommand}" BorderBrush="{x:Null}" 
                        VerticalAlignment="Stretch" HorizontalAlignment="Stretch" FontFamily="Consolas" Content="x"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ControlDisabledBackground}"/>
                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ControlDisabledBackground}"/>
                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ControlDisabledBackground}"/>
                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource ControlDisabledBackground}"/>
                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Panel.ZIndex" Value="1"/>
                <Setter Property="Margin" Value="-2,-2,0,-2"/>
                <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Panel.ZIndex" Value="1"/>
                <Setter Property="Margin" Value="-2,0,-2,-2"/>
                <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Panel.ZIndex" Value="1"/>
                <Setter Property="Margin" Value="0,-2,-2,-2"/>
                <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Panel.ZIndex" Value="1"/>
                <Setter Property="Margin" Value="-2,-2,-2,0"/>
                <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="AddButtons" TargetType="{x:Type TabControl}">
        <Grid x:Name="templateRoot" ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="ColumnDefinition0"/>
                <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                <RowDefinition x:Name="RowDefinition1" Height="*"/>
            </Grid.RowDefinitions>
            <StackPanel Orientation="Horizontal">
                <TabPanel x:Name="headerPanel"
                          Grid.Column="0" IsItemsHost="True" Margin="0 2 0 0"
                          Grid.Row="0" KeyboardNavigation.TabIndex="1" 
                          Panel.ZIndex="1"/>
                <Border CornerRadius="3" Height="28"
                        VerticalAlignment="Center" Background="{DynamicResource ContainerBackground}"
                        HorizontalAlignment="Center" Width="28" Margin="8 0 0 0">
                    <Button Background="Transparent" Content="+" Command="{Binding NewTabCommand}" BorderBrush="{x:Null}"
                            VerticalAlignment="Stretch" HorizontalAlignment="Stretch" FontFamily="Consolas" 
                            FontSize="16" Foreground="{DynamicResource ControlDefaultForeground}"/>
                </Border>
            </StackPanel>
            <Border x:Name="contentPanel" 
                    BorderBrush="{TemplateBinding BorderBrush}" 
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}" 
                    Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1"
                    KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent"
                                  Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="TabStripPlacement" Value="Bottom">
                <Setter Property="Grid.Row" TargetName="headerPanel" Value="1"/>
                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2"/>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Left">
                <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                <Setter Property="Grid.Column" TargetName="headerPanel" Value="0"/>
                <Setter Property="Grid.Column" TargetName="contentPanel" Value="1"/>
                <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2"/>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Right">
                <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                <Setter Property="Grid.Column" TargetName="headerPanel" Value="1"/>
                <Setter Property="Grid.Column" TargetName="contentPanel" Value="0"/>
                <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource ControlDisabledGlythColor}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>-->
    <!--#endregion-->

    <!--#region Textblock-->
    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <!--<Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>-->
        
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ControlDisabledForeground}"/>
            </Trigger>            
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region TextBox-->
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource ControlPrimaryCaretBackground}"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource ControlPrimaryCaretSelectionBackground}"/>
        <Setter Property="SelectionOpacity" Value="0.7"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <!--using VerticalContentAlignment=top because a multilined textbox is assumed-->
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True"
                            CornerRadius="{StaticResource DefaultCornerRadius}" >
                        <ScrollViewer x:Name="PART_ContentHost" 
                                      Focusable="False" 
                                      HorizontalScrollBarVisibility="Hidden" 
                                      VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ControlDisabledForeground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ControlDisabledBorderBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource ControlDisabledGlythColor}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region ToolBar-->
    <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" CornerRadius="0,0,3,3" SnapsToDevicePixels="True">
                        <Canvas HorizontalAlignment="Right" Height="6" Margin="2,7,2,2" SnapsToDevicePixels="True" VerticalAlignment="Bottom" Width="7">
                            <Path Data="M 1.5 1 L 1.5 6" Stroke="{TemplateBinding Foreground}"/>
                            <Path Data="M 0.5 0 L 0.5 5" Stroke="{TemplateBinding Foreground}"/>
                            <Path Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z" Fill="{TemplateBinding Foreground}"/>
                            <Path Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z" Fill="{TemplateBinding Foreground}"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlDefaultBackground}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlDefaultBackground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ControlGlythColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ControlDarkerBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBrightDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" CornerRadius="0,3,3,0" SnapsToDevicePixels="True">
                        <Canvas HorizontalAlignment="Right" Height="7" Margin="7,2,2,2" SnapsToDevicePixels="True" VerticalAlignment="Bottom" Width="6">
                            <Path Data="M 1 1.5 L 6 1.5" Stroke="{DynamicResource ControlBrightDefaultBackground}"/>
                            <Path Data="M 0 0.5 L 5 0.5" Stroke="{DynamicResource ControlBrightDefaultBorderBrush }"/>
                            <Path Data="M 0.5 4 L 6.5 4 L 3.5 7 Z" Fill="{DynamicResource ControlBrightDefaultBackground}"/>
                            <Path Data="M -0.5 3 L 5.5 3 L 2.5 6 Z" Fill="{DynamicResource ControlBrightDefaultBorderBrush}"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlDefaultBackground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ControlGlythColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NoCornersToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ControlDarkerBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBrightDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" CornerRadius="0" SnapsToDevicePixels="True">
                        <Canvas HorizontalAlignment="Right" Height="7" Margin="7,2,2,2" SnapsToDevicePixels="True" VerticalAlignment="Bottom" Width="6">
                            <Path Data="M 1 1.5 L 6 1.5" Stroke="{DynamicResource ControlBrightDefaultBackground}"/>
                            <Path Data="M 0 0.5 L 5 0.5" Stroke="{DynamicResource ControlBrightDefaultBorderBrush }"/>
                            <Path Data="M 0.5 4 L 6.5 4 L 3.5 7 Z" Fill="{DynamicResource ControlBrightDefaultBackground}"/>
                            <Path Data="M -0.5 3 L 5.5 3 L 2.5 6 Z" Fill="{DynamicResource ControlBrightDefaultBorderBrush}"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlPrimaryMouseOverBackground}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlDefaultBackground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ControlGlythColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <Rectangle>
                            <Rectangle.Fill>
                                <DrawingBrush TileMode="Tile" Viewbox="0,0,4,4" Viewport="0,0,4,4" ViewportUnits="Absolute" ViewboxUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <GeometryDrawing Brush="{DynamicResource ControlBrightDefaultBackground}" Geometry="M 1 1 L 1 3 L 3 3 L 3 1 z"/>
                                            <GeometryDrawing Brush="{DynamicResource ControlBrightDefaultBorderBrush}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z"/>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="SizeAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolBarMainPanelBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Margin" Value="0,0,11,0"/>
        <Setter Property="CornerRadius" Value="3,3,3,3"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="True">
                <Setter Property="CornerRadius" Value="0,0,0,0"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="NoCornersToolBarStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Margin" Value="0,0,11,0"/>
        <Setter Property="CornerRadius" Value="0"/>
    </Style>
    <Style TargetType="{x:Type ToolBar}">
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Grid x:Name="Grid" Margin="3,1,1,1" SnapsToDevicePixels="True">
                        <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
                            <ToggleButton x:Name="OverflowButton" ClickMode="Press" FocusVisualStyle="{x:Null}" 
                                          IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                          IsEnabled="{TemplateBinding HasOverflowItems}" 
                                          Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}"/>
                            <Popup x:Name="OverflowPopup" AllowsTransparency="True" Focusable="False"
                                   IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                   Placement="Bottom" StaysOpen="False">
                                <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                                    <Border x:Name="ToolBarSubMenuBorder" 
                                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" 
                                            Background="{TemplateBinding Background}" 
                                            RenderOptions.ClearTypeHint="Enabled">
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" 
                                                              KeyboardNavigation.DirectionalNavigation="Cycle" 
                                                              FocusVisualStyle="{x:Null}" Focusable="True" Margin="2" 
                                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                              KeyboardNavigation.TabNavigation="Cycle" WrapWidth="200"/>
                                    </Border>
                                </Themes:SystemDropShadowChrome>
                            </Popup>
                        </Grid>
                        <Border x:Name="MainPanelBorder" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}" 
                                Style="{StaticResource ToolBarMainPanelBorderStyle}">
                            <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                <Thumb x:Name="ToolBarThumb" Margin="-3,-1,0,0" Padding="6,5,1,6" Style="{StaticResource ToolBarThumbStyle}" Width="10"/>
                                <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" Margin="4,0,4,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="True" Margin="0,1,2,2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen" Value="True">
                            <Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="False"/>
                        </Trigger>
                        <Trigger Property="Header" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="True">
                            <Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasDropShadow" SourceName="OverflowPopup" Value="True">
                            <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                            <Setter Property="SnapsToDevicePixels" TargetName="Shdw" Value="True"/>
                            <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="Margin" TargetName="Grid" Value="1,3,1,1"/>
                            <Setter Property="Style" TargetName="OverflowButton" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"/>
                            <Setter Property="Height" TargetName="ToolBarThumb" Value="10"/>
                            <Setter Property="Width" TargetName="ToolBarThumb" Value="Auto"/>
                            <Setter Property="Margin" TargetName="ToolBarThumb" Value="-1,-3,0,0"/>
                            <Setter Property="Padding" TargetName="ToolBarThumb" Value="5,6,6,1"/>
                            <Setter Property="Margin" TargetName="ToolBarHeader" Value="0,0,0,4"/>
                            <Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="1,0,2,2"/>
                            <Setter Property="DockPanel.Dock" TargetName="ToolBarThumb" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>
                            <Setter Property="HorizontalAlignment" TargetName="OverflowGrid" Value="Stretch"/>
                            <Setter Property="VerticalAlignment" TargetName="OverflowGrid" Value="Bottom"/>
                            <Setter Property="Placement" TargetName="OverflowPopup" Value="Right"/>
                            <Setter Property="Margin" TargetName="MainPanelBorder" Value="0,0,0,11"/>
                            <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ControlDisabledGlythColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="NoCornersToolBar" TargetType="{x:Type ToolBar}">
        <Grid x:Name="Grid" Margin="0" SnapsToDevicePixels="True">
            <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
                <ToggleButton x:Name="OverflowButton" ClickMode="Press" FocusVisualStyle="{x:Null}" 
                                          IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                          IsEnabled="{TemplateBinding HasOverflowItems}" 
                                          Style="{StaticResource NoCornersToolBarHorizontalOverflowButtonStyle}"/>
                <Popup x:Name="OverflowPopup" AllowsTransparency="True" Focusable="False"
                                   IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                   Placement="Bottom" StaysOpen="False">
                    <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                        <Border x:Name="ToolBarSubMenuBorder"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" 
                                Background="{TemplateBinding Background}"
                                RenderOptions.ClearTypeHint="Enabled">
                            <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" 
                                                  KeyboardNavigation.DirectionalNavigation="Cycle" 
                                                  FocusVisualStyle="{x:Null}" Focusable="True" Margin="2" 
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  KeyboardNavigation.TabNavigation="Cycle" WrapWidth="200"/>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                </Popup>
            </Grid>
            <Border x:Name="MainPanelBorder" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" CornerRadius="0"
                                Padding="{TemplateBinding Padding}" 
                                Style="{StaticResource ToolBarMainPanelBorderStyle}">
                <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                    <Thumb x:Name="ToolBarThumb" Margin="-3,-1,0,0" Padding="6,5,1,6" Style="{StaticResource ToolBarThumbStyle}" Width="10"/>
                    <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" Margin="4,0,4,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                    <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="True" Margin="0,1,2,2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                </DockPanel>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsOverflowOpen" Value="True">
                <Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="False"/>
            </Trigger>
            <Trigger Property="Header" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ToolBarTray.IsLocked" Value="True">
                <Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="OverflowPopup" Value="True">
                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                <Setter Property="SnapsToDevicePixels" TargetName="Shdw" Value="True"/>
                <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Margin" TargetName="Grid" Value="1,3,1,1"/>
                <Setter Property="Style" TargetName="OverflowButton" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"/>
                <Setter Property="Height" TargetName="ToolBarThumb" Value="10"/>
                <Setter Property="Width" TargetName="ToolBarThumb" Value="Auto"/>
                <Setter Property="Margin" TargetName="ToolBarThumb" Value="-1,-3,0,0"/>
                <Setter Property="Padding" TargetName="ToolBarThumb" Value="5,6,6,1"/>
                <Setter Property="Margin" TargetName="ToolBarHeader" Value="0,0,0,4"/>
                <Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="1,0,2,2"/>
                <Setter Property="DockPanel.Dock" TargetName="ToolBarThumb" Value="Top"/>
                <Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>
                <Setter Property="HorizontalAlignment" TargetName="OverflowGrid" Value="Stretch"/>
                <Setter Property="VerticalAlignment" TargetName="OverflowGrid" Value="Bottom"/>
                <Setter Property="Placement" TargetName="OverflowPopup" Value="Right"/>
                <Setter Property="Margin" TargetName="MainPanelBorder" Value="0,0,0,11"/>
                <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ControlDisabledGlythColor}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion-->

    <!--#region ToolBarTray-->
    <Style TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background" Value="{DynamicResource ContainerBackground}"/>
    </Style>
    <!--#endregion-->

    <!--#region Tooltip-->
    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="Background" Value="{DynamicResource ControlDefaultBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="MaxWidth" Value="800"/>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="HasDropShadow" Value="True"/>
        <Setter Property="Placement" Value="MousePoint"/>
        <Setter Property="PlacementRectangle" Value="10 10 5 5"/>
        <Setter Property="HorizontalOffset" Value="15"/>
        <Setter Property="VerticalOffset" Value="15"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Themes:SystemDropShadowChrome Name="Shdw" 
                                                   Themes:SystemDropShadowChrome.Color="Transparent" 
                                                   Themes:SystemDropShadowChrome.CornerRadius="0" 
                                                   SnapsToDevicePixels="True">
                        <Border Name="Border"
                                SnapsToDevicePixels="True"
                                BorderThickness="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}">
                            <ContentPresenter Margin="5" HorizontalAlignment="Left" VerticalAlignment="Top">
                                <ContentPresenter.Resources>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="TextWrapping" Value="Wrap"/>
                                        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                                        <Setter Property="TextAlignment" Value="Left"/>
                                        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
                                    </Style>
                                </ContentPresenter.Resources>
                            </ContentPresenter>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="True">
                            <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shdw" Property="Themes:SystemDropShadowChrome.Color" Value="#71000000" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
       
    <!--#region TreeView-->
    <Style TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border x:Name="Bd" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="_tv_scrollviewer_" 
                                      Background="{TemplateBinding Background}" 
                                      CanContentScroll="False" Focusable="False" 
                                      Padding="{TemplateBinding Padding}" 
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" 
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlDisabledBackground}"/>
                        </Trigger>
                        <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
                            <Setter Property="CanContentScroll" TargetName="_tv_scrollviewer_" Value="True"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" 
                            Height="16" 
                            Padding="5,5,5,5" 
                            Width="16">
                        <Path x:Name="ExpandPath" Data="M0,0 L0,6 L6,0 z" 
                              Fill="{DynamicResource ControlPrimaryGlythColor}" 
                              Stroke="{DynamicResource ControlPrimaryGlythColor}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource ControlPrimarySelectedGlythColor}"/>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource ControlPrimarySelectedGlythColor}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource ControlPrimaryMouseOverGlythColor}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource ControlPrimaryMouseOverGlythColor}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource ControlPrimarySelectedMouseOverGlythColor}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource ControlPrimarySelectedMouseOverGlythColor}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" 
                                      ClickMode="Press" 
                                      IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" 
                                      Style="{StaticResource ExpandCollapseToggleStyle}"/>
                        <Border x:Name="Bd" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                Grid.Column="1" 
                                Padding="{TemplateBinding Padding}" 
                                SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="PART_Header"
                                              ContentSource="Header" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlMouseOverBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlMouseOverBorderBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlSelectedBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlSelectedBorderBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsSelectionActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlDefaultBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ControlDefaultBorderBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ControlDisabledForeground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region UserControlStyle-->
    <Style x:Key="UserControlStyle" TargetType="{x:Type UserControl}">
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}" />
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
    </Style>
    <!--#endregion-->

    <!--#region WindowTemplates-->
    <ControlTemplate x:Key="WindowTemplateKey" TargetType="{x:Type Window}">
        <Border BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" 
                Background="{TemplateBinding Background}">
            <Grid>
                <AdornerDecorator>
                    <ContentPresenter/>
                </AdornerDecorator>
                <ResizeGrip x:Name="WindowResizeGrip" 
                            HorizontalAlignment="Right" 
                            IsTabStop="False"
                            Visibility="Visible" 
                            VerticalAlignment="Bottom"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                    <Condition Property="WindowState" Value="Normal"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <!-- Simple Win32 Window style -->
    <Style x:Key="MainWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}">
                        <AdornerDecorator>
                            <ContentPresenter/>
                        </AdornerDecorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
                <Setter Property="Template" Value="{DynamicResource WindowTemplateKey}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Custom Window style (unaffected by win32 style stuff) -->
    <Style x:Key="CustomWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="BorderBrush" Value="{DynamicResource WindowTitleColor}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}" />
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ResizeMode" Value="CanResizeWithGrip"/>
        <Setter Property="WindowStyle" Value="SingleBorderWindow"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="26"
                              ResizeBorderThickness="6"
                              CornerRadius="0"
                              GlassFrameThickness="1"
                              NonClientFrameEdges="None"
                              UseAeroCaptionButtons="False"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <AdornerDecorator Margin="0,30,0,0">
                                    <ContentPresenter />
                                </AdornerDecorator>
                                <Grid Height="30" x:Name="titlebar"
                                      Background="{TemplateBinding BorderBrush}"
                                      VerticalAlignment="Top" Margin="0">
                                    <DockPanel Margin="0,0,130,0">
                                        <Image HorizontalAlignment="Left" VerticalAlignment="Top" Margin="4,4,0,0" Source="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" Height="24"  />
                                        <TextBlock Margin="5,3"
                                                   VerticalAlignment="Center"
                                                   HorizontalAlignment="Stretch"
                                                   FontSize="14" Width="Auto"
                                                   TextWrapping="NoWrap"
                                                   Foreground="{DynamicResource ControlSelectedForeground}"
                                                   Text="{Binding Title, RelativeSource={RelativeSource TemplatedParent}}"   
                                                   Grid.Column="1" TextAlignment="Left"/>
                                    </DockPanel>
                                    <StackPanel Orientation="Horizontal"
                                        Grid.Column="0" HorizontalAlignment="Right">
                                        <Button x:Name="btnMinimize"
                                                Background="Transparent"
                                                BorderBrush="Transparent"
                                                Width="40"
                                                VerticalContentAlignment="Bottom"
                                                WindowChrome.IsHitTestVisibleInChrome="True" 
                                                Click="Minimize_Event">
                                            <Rectangle Width="10" 
                                                       VerticalAlignment="Center" 
                                                       Margin="1 1 0 0" 
                                                       Stroke="{DynamicResource ControlGlythColor}" 
                                                       StrokeThickness="1"/>
                                        </Button>

                                        <Button x:Name="btnRestore"
                                                Background="Transparent"
                                                BorderBrush="Transparent"
                                                Width="40"
                                                WindowChrome.IsHitTestVisibleInChrome="True" 
                                                Click="AutoMinimize_Event">
                                            <Grid Width="12" Height="12">
                                                <Rectangle StrokeThickness="1" 
                                                           Stroke="{DynamicResource ControlSelectedForeground}"
                                                           Margin="3,0,0,3"/>
                                                <Rectangle StrokeThickness="1" 
                                                           Fill="{TemplateBinding BorderBrush}"
                                                           Stroke="{DynamicResource ControlSelectedForeground}"
                                                           Margin="0 3 3 0"/>
                                            </Grid>
                                        </Button>
                                        <Button x:Name="btnClose"
                                                Background="Transparent"
                                                BorderBrush="Transparent"
                                                Template="{DynamicResource CloseWindowButton}"
                                                Width="40"
                                                WindowChrome.IsHitTestVisibleInChrome="True" 
                                                Click="CloseWindow_Event">
                                            <Grid Margin="0 1 0 0">
                                                <Line X1="0" Y1="0" X2="11" Y2="11" Stroke="{DynamicResource ControlGlythColor}" StrokeThickness="2" />
                                                <Line X1="0" Y2="0" Y1="11" X2="11" Stroke="{DynamicResource ControlGlythColor}" StrokeThickness="2" />
                                            </Grid>
                                        </Button>
                                    </StackPanel>
                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter Property="BorderThickness" Value="8"/>
            </Trigger>
            <Trigger Property="WindowState" Value="Normal">
                <Setter Property="BorderThickness" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Same window but auto maximize/minimize button removed. Tool window -->
    <Style x:Key="CustomToolWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="BorderBrush" Value="{DynamicResource WindowTitleColor}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="WindowStyle" Value="SingleBorderWindow"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="26"
                              ResizeBorderThickness="0"
                              CornerRadius="0"
                              GlassFrameThickness="1"
                              NonClientFrameEdges="None"
                              UseAeroCaptionButtons="False"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <AdornerDecorator Margin="0,30,0,0">
                                    <ContentPresenter />
                                </AdornerDecorator>
                                <Grid Height="30" x:Name="titlebar"
                                      Background="{TemplateBinding BorderBrush}"
                                      VerticalAlignment="Top" Margin="0">
                                    <DockPanel Margin="0,0,130,0">
                                        <Image HorizontalAlignment="Left" VerticalAlignment="Top" Margin="4,4,0,0" Source="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" Height="24"  />
                                        <TextBlock Margin="5,3"
                                                   VerticalAlignment="Center"
                                                   HorizontalAlignment="Stretch"
                                                   FontSize="14" Width="Auto"
                                                   TextWrapping="NoWrap"
                                                   Foreground="{DynamicResource ControlSelectedForeground}"
                                                   Text="{Binding Title, RelativeSource={RelativeSource TemplatedParent}}"   
                                                   Grid.Column="1" TextAlignment="Left"/>
                                    </DockPanel>
                                    <StackPanel Orientation="Horizontal"
                                        Grid.Column="0" HorizontalAlignment="Right">
                                        <Button x:Name="btnMinimize"
                                                Background="Transparent"
                                                BorderBrush="Transparent"
                                                Width="40"
                                                VerticalContentAlignment="Bottom"
                                                WindowChrome.IsHitTestVisibleInChrome="True" 
                                                Click="Minimize_Event">
                                            <Rectangle Width="10"
                                                       VerticalAlignment="Center"
                                                       Margin="1 1 0 0" 
                                                       Stroke="{DynamicResource ControlSelectedForeground}"
                                                       StrokeThickness="1"/>
                                        </Button>
                                        <Button x:Name="btnClose"
                                                Background="Transparent"
                                                BorderBrush="Transparent"
                                                Template="{DynamicResource CloseWindowButton}"
                                                Width="40"
                                                WindowChrome.IsHitTestVisibleInChrome="True" 
                                                Click="CloseWindow_Event">
                                            <Grid Margin="0 1 0 0">
                                                <Line X1="0" Y1="0" X2="11" Y2="11" Stroke="{DynamicResource ControlSelectedForeground}" 
                                                      StrokeThickness="1" />
                                                <Line X1="0" Y2="0" Y1="11" X2="11" Stroke="{DynamicResource ControlSelectedForeground}" 
                                                      StrokeThickness="1" />
                                            </Grid>
                                        </Button>
                                    </StackPanel>
                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter Property="BorderThickness" Value="8"/>
            </Trigger>
            <Trigger Property="WindowState" Value="Normal">
                <Setter Property="BorderThickness" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Same window but auto button removed. -->
    <Style x:Key="PopupWindowStyle" TargetType="{x:Type Window}" >
        <Setter Property="BorderBrush" Value="{DynamicResource WindowTitleColor}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}" />
        <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="WindowStyle" Value="SingleBorderWindow"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}">
                        <AdornerDecorator>
                            <ContentPresenter/>
                        </AdornerDecorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Gives the button red colour properties when mouseover/clicked -->
    <ControlTemplate x:Key="CloseWindowButton" TargetType="{x:Type Button}">
        <Border x:Name="border" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" 
                Background="{TemplateBinding Background}" 
                SnapsToDevicePixels="True"
                HorizontalAlignment="Stretch" 
                VerticalAlignment="Stretch">
            <ContentPresenter x:Name="contentPresenter" 
                              Focusable="False" 
                              Margin="{TemplateBinding Padding}" 
                              RecognizesAccessKey="True" 
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsDefaulted" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlMouseOverBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="{StaticResource CloseButtonMouseOverBrush}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource CloseButtonMouseOverBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="border" Value="{StaticResource CloseButtonSelectionBrush}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource CloseButtonSelectionBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="{DynamicResource ControlBrightDefaultBackground}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlBrightDefaultBorderBrush}"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource ControlDisabledGlythColor}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion-->

    <!--#endregion-->
</ResourceDictionary>